
############################################################
# BASE FUNCTIONS

public void ActiveTexture(uint texture);
public void AttachShader(uint program, uint shader);
public void BeginConditionalRender(uint id, uint mode);
public void BeginQuery(uint target, uint id);
public void BeginTransformFeedback(uint primitiveMode);
public void BindAttribLocation(uint program, uint index, string name);
public void BindBuffer(uint target, uint buffer);
public void BindBufferBase(uint target, uint index, uint buffer);
public void BindBufferRange(uint target, uint index, uint buffer, IntPtr offset, IntPtr size);
public void BindFragDataLocation(uint program, uint color, string name);
public void BindFramebuffer(uint target, uint framebuffer);
public void BindRenderbuffer(uint target, uint renderbuffer);
public void BindTexture(uint target, uint texture);
public void BindVertexArray(uint array);
public void BlendColor(float red, float green, float blue, float alpha);
public void BlendEquation(uint mode);
public void BlendEquationSeparate(uint modeRGB, uint modeAlpha);
public void BlendFunc(uint sfactor, uint dfactor);
public void BlendFuncSeparate(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha);
public void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);
public void BufferData(uint target, IntPtr size, IntPtr data, uint usage);
public void BufferSubData(uint target, IntPtr offset, IntPtr size, IntPtr data);
public uint CheckFramebufferStatus(uint target);
public void ClampColor(uint target, uint clamp);
public void Clear(uint mask);
public void ClearBufferfi(uint buffer, int drawbuffer, float depth, int stencil);
public void ClearBufferfv(uint buffer, int drawbuffer, IntPtr value);
public void ClearBufferiv(uint buffer, int drawbuffer, IntPtr value);
public void ClearBufferuiv(uint buffer, int drawbuffer, IntPtr value);
public void ClearColor(float red, float green, float blue, float alpha);
public void ClearDepth(double depth);
public void ClearStencil(int s);
public uint ClientWaitSync(IntPtr sync, uint flags, ulong timeout);
public void ColorMask(bool red, bool green, bool blue, bool alpha);
public void ColorMaski(uint index, bool r, bool g, bool b, bool a);
public void CompileShader(uint shader);
public void CompressedTexImage1D(uint target, int level, uint internalformat, int width, int border, int imageSize, IntPtr data);
public void CompressedTexImage2D(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, IntPtr data);
public void CompressedTexImage3D(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data);
public void CompressedTexSubImage1D(uint target, int level, int xoffset, int width, uint format, int imageSize, IntPtr data);
public void CompressedTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, IntPtr data);
public void CompressedTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, IntPtr data);
public void CopyBufferSubData(uint readTarget, uint writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size);
public void CopyTexImage1D(uint target, int level, uint internalformat, int x, int y, int width, int border);
public void CopyTexImage2D(uint target, int level, uint internalformat, int x, int y, int width, int height, int border);
public void CopyTexSubImage1D(uint target, int level, int xoffset, int x, int y, int width);
public void CopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
public void CopyTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
public uint CreateProgram();
public uint CreateShader(uint type);
public void CullFace(uint mode);
public void DeleteBuffers(int n, IntPtr buffers);
public void DeleteFramebuffers(int n, IntPtr framebuffers);
public void DeleteProgram(uint program);
public void DeleteQueries(int n, IntPtr ids);
public void DeleteRenderbuffers(int n, IntPtr renderbuffers);
public void DeleteShader(uint shader);
public void DeleteSync(IntPtr sync);
private void DeleteTextures(int n, IntPtr textures);
public void DeleteVertexArrays(int n, IntPtr arrays);
public void DepthFunc(uint func);
public void DepthMask(bool flag);
public void DepthRange(double near, double far);
public void DetachShader(uint program, uint shader);
public void Disable(uint cap);
public void Disablei(uint target, uint index);
public void DisableVertexAttribArray(uint index);
public void DrawArrays(uint mode, int first, int count);
public void DrawArraysInstanced(uint mode, int first, int count, int instancecount);
public void DrawBuffer(uint mode);
public void DrawBuffers(int n, IntPtr bufs);
public void DrawElements(uint mode, int count, uint type, IntPtr indices);
public void DrawElementsBaseVertex(uint mode, int count, uint type, IntPtr indices, int basevertex);
public void DrawElementsInstanced(uint mode, int count, uint type, IntPtr indices, int instancecount);
public void DrawElementsInstancedBaseVertex(uint mode, int count, uint type, IntPtr indices, int instancecount, int basevertex);
public void DrawRangeElements(uint mode, uint start, uint end, int count, uint type, IntPtr indices);
public void DrawRangeElementsBaseVertex(uint mode, uint start, uint end, int count, uint type, IntPtr indices, int basevertex);
public void Enable(uint cap);
public void Enablei(uint target, uint index);
public void EnableVertexAttribArray(uint index);
public void EndConditionalRender();
public void EndQuery(uint target);
public void EndTransformFeedback();
public IntPtr FenceSync(uint condition, uint flags);
public void Finish();
public void Flush();
public void FlushMappedBufferRange(uint target, IntPtr offset, IntPtr length);
public void FramebufferRenderbuffer(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer);
public void FramebufferTexture(uint target, uint attachment, uint texture, int level);
public void FramebufferTexture1D(uint target, uint attachment, uint textarget, uint texture, int level);
public void FramebufferTexture2D(uint target, uint attachment, uint textarget, uint texture, int level);
public void FramebufferTexture3D(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset);
public void FramebufferTextureLayer(uint target, uint attachment, uint texture, int level, int layer);
public void FrontFace(uint mode);
public void GenBuffers(int n, IntPtr buffers);
public void GenerateMipmap(uint target);
public void GenFramebuffers(int n, IntPtr framebuffers);
public void GenQueries(int n, IntPtr ids);
public void GenRenderbuffers(int n, IntPtr renderbuffers);
private void GenTextures(int n, IntPtr textures);
public void GenVertexArrays(int n, IntPtr arrays);
public void GetActiveAttrib(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, string name);
public void GetActiveUniform(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, string name);
public void GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, uint pname, IntPtr _params);
public void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, IntPtr length, IntPtr uniformBlockName);
public void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, IntPtr length, IntPtr uniformName);
public void GetActiveUniformsiv(uint program, int uniformCount, IntPtr uniformIndices, uint pname, IntPtr _params);
public void GetAttachedShaders(uint program, int maxCount, IntPtr count, IntPtr shaders);
public int GetAttribLocation(uint program, IntPtr name);
public void GetBooleani_v(uint target, uint index, IntPtr data);
public void GetBooleanv(uint pname, IntPtr data);
public void GetBufferParameteri64v(uint target, uint pname, IntPtr _params);
public void GetBufferParameteriv(uint target, uint pname, IntPtr _params);
public void GetBufferPointerv(uint target, uint pname, IntPtr _params);
public void GetBufferSubData(uint target, IntPtr offset, IntPtr size, IntPtr data);
public void GetCompressedTexImage(uint target, int level, IntPtr img);
public void GetDoublev(uint pname, IntPtr data);
public uint GetError();
public void GetFloatv(uint pname, IntPtr data);
public int GetFragDataLocation(uint program, string name);
public void GetFramebufferAttachmentParameteriv(uint target, uint attachment, uint pname, IntPtr _params);
public void GetInteger64i_v(uint target, uint index, IntPtr data);
public void GetInteger64v(uint pname, IntPtr data);
public void GetIntegeri_v(uint target, uint index, IntPtr data);
public void GetIntegerv(uint pname, IntPtr data);
public void GetMultisamplefv(uint pname, uint index, IntPtr val);
public void GetProgramInfoLog(uint program, int bufSize, IntPtr length, string infoLog);
public void GetProgramiv(uint program, uint pname, IntPtr _params);
public void GetQueryiv(uint target, uint pname, IntPtr _params);
public void GetQueryObjectiv(uint id, uint pname, IntPtr _params);
public void GetQueryObjectuiv(uint id, uint pname, IntPtr _params);
public void GetRenderbufferParameteriv(uint target, uint pname, IntPtr _params);
public void GetShaderInfoLog(uint shader, int bufSize, IntPtr length, string infoLog);
public void GetShaderiv(uint shader, uint pname, IntPtr _params);
public void GetShaderSource(uint shader, int bufSize, IntPtr length, string source);
public IntPtr GetString(uint name);
public IntPtr GetStringi(uint name, uint index);
public void GetSynciv(IntPtr sync, uint pname, int bufSize, IntPtr length, IntPtr values);
public void GetTexImage(uint target, int level, uint format, uint type, IntPtr pixels);
public void GetTexLevelParameterfv(uint target, int level, uint pname, IntPtr _params);
public void GetTexLevelParameteriv(uint target, int level, uint pname, IntPtr _params);
public void GetTexParameterfv(uint target, uint pname, IntPtr _params);
public void GetTexParameterIiv(uint target, uint pname, IntPtr _params);
public void GetTexParameterIuiv(uint target, uint pname, IntPtr _params);
public void GetTexParameteriv(uint target, uint pname, IntPtr _params);
public void GetTransformFeedbackVarying(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, string name);
public uint GetUniformBlockIndex(uint program, string uniformBlockName);
public void GetUniformfv(uint program, int location, IntPtr _params);
public void GetUniformIndices(uint program, int uniformCount, IntPtr uniformNames, IntPtr uniformIndices);
public void GetUniformiv(uint program, int location, IntPtr _params);
public int GetUniformLocation(uint program, IntPtr name);
public void GetUniformuiv(uint program, int location, IntPtr _params);
public void GetVertexAttribdv(uint index, uint pname, IntPtr _params);
public void GetVertexAttribfv(uint index, uint pname, IntPtr _params);
public void GetVertexAttribIiv(uint index, uint pname, IntPtr _params);
public void GetVertexAttribIuiv(uint index, uint pname, IntPtr _params);
public void GetVertexAttribiv(uint index, uint pname, IntPtr _params);
public void GetVertexAttribPointerv(uint index, uint pname, IntPtr pointer);
public void Hint(uint target, uint mode);
public bool IsBuffer(uint buffer);
public bool IsEnabled(uint cap);
public bool IsEnabledi(uint target, uint index);
public bool IsFramebuffer(uint framebuffer);
public bool IsProgram(uint program);
public bool IsQuery(uint id);
public bool IsRenderbuffer(uint renderbuffer);
public bool IsShader(uint shader);
public bool IsSync(IntPtr sync);
public bool IsTexture(uint texture);
public bool IsVertexArray(uint array);
public void LineWidth(float width);
public void LinkProgram(uint program);
public void LogicOp(uint opcode);
public IntPtr MapBuffer(uint target, uint access);
public IntPtr MapBufferRange(uint target, IntPtr offset, IntPtr length, uint access);
public void MultiDrawArrays(uint mode, IntPtr first, IntPtr count, int drawcount);
public void MultiDrawElements(uint mode, IntPtr count, uint type, IntPtr indices, int drawcount);
public void MultiDrawElementsBaseVertex(uint mode, IntPtr count, uint type, IntPtr indices, int drawcount, IntPtr basevertex);
public void PixelStoref(uint pname, float param);
public void PixelStorei(uint pname, int param);
public void PointParameterf(uint pname, float param);
public void PointParameterfv(uint pname, IntPtr _params);
public void PointParameteri(uint pname, int param);
public void PointParameteriv(uint pname, IntPtr _params);
public void PointSize(float size);
public void PolygonMode(uint face, uint mode);
public void PolygonOffset(float factor, float units);
public void PrimitiveRestartIndex(uint index);
public void ProvokingVertex(uint mode);
public void ReadBuffer(uint mode);
public void ReadPixels(int x, int y, int width, int height, uint format, uint type, IntPtr pixels);
public void RenderbufferStorage(uint target, uint internalformat, int width, int height);
public void RenderbufferStorageMultisample(uint target, int samples, uint internalformat, int width, int height);
public void SampleCoverage(float value, bool invert);
public void SampleMaski(uint index, uint mask);
public void Scissor(int x, int y, int width, int height);
public void ShaderSource(uint shader, int count, IntPtr _string, IntPtr length);
public void StencilFunc(uint func, int _ref, uint mask);
public void StencilFuncSeparate(uint face, uint func, int _ref, uint mask);
public void StencilMask(uint mask);
public void StencilMaskSeparate(uint face, uint mask);
public void StencilOp(uint fail, uint zfail, uint zpass);
public void StencilOpSeparate(uint face, uint sfail, uint dpfail, uint dppass);
public void TexBuffer(uint target, uint internalformat, uint buffer);
public void TexImage1D(uint target, int level, int internalformat, int width, int border, uint format, uint type, IntPtr pixels);
public void TexImage2D(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, IntPtr pixels);
public void TexImage2DMultisample(uint target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations);
public void TexImage3D(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, IntPtr pixels);
public void TexImage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations);
public void TexParameterf(uint target, uint pname, float param);
public void TexParameterfv(uint target, uint pname, IntPtr _params);
public void TexParameteri(uint target, uint pname, int param);
public void TexParameterIiv(uint target, uint pname, IntPtr _params);
public void TexParameterIuiv(uint target, uint pname, IntPtr _params);
public void TexParameteriv(uint target, uint pname, IntPtr _params);
public void TexSubImage1D(uint target, int level, int xoffset, int width, uint format, uint type, IntPtr pixels);
public void TexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, IntPtr pixels);
public void TexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, IntPtr pixels);
public void TransformFeedbackVaryings(uint program, int count, IntPtr varyings, uint bufferMode);
public void Uniform1f(int location, float v0);
public void Uniform1fv(int location, int count, IntPtr value);
public void Uniform1i(int location, int v0);
public void Uniform1iv(int location, int count, IntPtr value);
public void Uniform1ui(int location, uint v0);
public void Uniform1uiv(int location, int count, IntPtr value);
public void Uniform2f(int location, float v0, float v1);
public void Uniform2fv(int location, int count, IntPtr value);
public void Uniform2i(int location, int v0, int v1);
public void Uniform2iv(int location, int count, IntPtr value);
public void Uniform2ui(int location, uint v0, uint v1);
public void Uniform2uiv(int location, int count, IntPtr value);
public void Uniform3f(int location, float v0, float v1, float v2);
public void Uniform3fv(int location, int count, IntPtr value);
public void Uniform3i(int location, int v0, int v1, int v2);
public void Uniform3iv(int location, int count, IntPtr value);
public void Uniform3ui(int location, uint v0, uint v1, uint v2);
public void Uniform3uiv(int location, int count, IntPtr value);
public void Uniform4f(int location, float v0, float v1, float v2, float v3);
public void Uniform4fv(int location, int count, IntPtr value);
public void Uniform4i(int location, int v0, int v1, int v2, int v3);
public void Uniform4iv(int location, int count, IntPtr value);
public void Uniform4ui(int location, uint v0, uint v1, uint v2, uint v3);
public void Uniform4uiv(int location, int count, IntPtr value);
public void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding);
public void UniformMatrix2fv(int location, int count, bool transpose, IntPtr value);
public void UniformMatrix2x3fv(int location, int count, bool transpose, IntPtr value);
public void UniformMatrix2x4fv(int location, int count, bool transpose, IntPtr value);
public void UniformMatrix3fv(int location, int count, bool transpose, IntPtr value);
public void UniformMatrix3x2fv(int location, int count, bool transpose, IntPtr value);
public void UniformMatrix3x4fv(int location, int count, bool transpose, IntPtr value);
public void UniformMatrix4fv(int location, int count, bool transpose, IntPtr value);
public void UniformMatrix4x2fv(int location, int count, bool transpose, IntPtr value);
public void UniformMatrix4x3fv(int location, int count, bool transpose, IntPtr value);
public bool UnmapBuffer(uint target);
public void UseProgram(uint program);
public void ValidateProgram(uint program);
public void VertexAttrib1d(uint index, double x);
public void VertexAttrib1dv(uint index, IntPtr v);
public void VertexAttrib1f(uint index, float x);
public void VertexAttrib1fv(uint index, IntPtr v);
public void VertexAttrib1s(uint index, short x);
public void VertexAttrib1sv(uint index, IntPtr v);
public void VertexAttrib2d(uint index, double x, double y);
public void VertexAttrib2dv(uint index, IntPtr v);
public void VertexAttrib2f(uint index, float x, float y);
public void VertexAttrib2fv(uint index, IntPtr v);
public void VertexAttrib2s(uint index, short x, short y);
public void VertexAttrib2sv(uint index, IntPtr v);
public void VertexAttrib3d(uint index, double x, double y, double z);
public void VertexAttrib3dv(uint index, IntPtr v);
public void VertexAttrib3f(uint index, float x, float y, float z);
public void VertexAttrib3fv(uint index, IntPtr v);
public void VertexAttrib3s(uint index, short x, short y, short z);
public void VertexAttrib3sv(uint index, IntPtr v);
public void VertexAttrib4bv(uint index, IntPtr v);
public void VertexAttrib4d(uint index, double x, double y, double z, double w);
public void VertexAttrib4dv(uint index, IntPtr v);
public void VertexAttrib4f(uint index, float x, float y, float z, float w);
public void VertexAttrib4fv(uint index, IntPtr v);
public void VertexAttrib4iv(uint index, IntPtr v);
public void VertexAttrib4Nbv(uint index, IntPtr v);
public void VertexAttrib4Niv(uint index, IntPtr v);
public void VertexAttrib4Nsv(uint index, IntPtr v);
public void VertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w);
public void VertexAttrib4Nubv(uint index, IntPtr v);
public void VertexAttrib4Nuiv(uint index, IntPtr v);
public void VertexAttrib4Nusv(uint index, IntPtr v);
public void VertexAttrib4s(uint index, short x, short y, short z, short w);
public void VertexAttrib4sv(uint index, IntPtr v);
public void VertexAttrib4ubv(uint index, IntPtr v);
public void VertexAttrib4uiv(uint index, IntPtr v);
public void VertexAttrib4usv(uint index, IntPtr v);
public void VertexAttribI1i(uint index, int x);
public void VertexAttribI1iv(uint index, IntPtr v);
public void VertexAttribI1ui(uint index, uint x);
public void VertexAttribI1uiv(uint index, IntPtr v);
public void VertexAttribI2i(uint index, int x, int y);
public void VertexAttribI2iv(uint index, IntPtr v);
public void VertexAttribI2ui(uint index, uint x, uint y);
public void VertexAttribI2uiv(uint index, IntPtr v);
public void VertexAttribI3i(uint index, int x, int y, int z);
public void VertexAttribI3iv(uint index, IntPtr v);
public void VertexAttribI3ui(uint index, uint x, uint y, uint z);
public void VertexAttribI3uiv(uint index, IntPtr v);
public void VertexAttribI4bv(uint index, IntPtr v);
public void VertexAttribI4i(uint index, int x, int y, int z, int w);
public void VertexAttribI4iv(uint index, IntPtr v);
public void VertexAttribI4sv(uint index, IntPtr v);
public void VertexAttribI4ubv(uint index, IntPtr v);
public void VertexAttribI4ui(uint index, uint x, uint y, uint z, uint w);
public void VertexAttribI4uiv(uint index, IntPtr v);
public void VertexAttribI4usv(uint index, IntPtr v);
public void VertexAttribIPointer(uint index, int size, uint type, int stride, IntPtr pointer);
public void VertexAttribPointer(uint index, int size, uint type, bool normalized, int stride, IntPtr pointer);
public void Viewport(int x, int y, int width, int height);
public void WaitSync(IntPtr sync, uint flags, ulong timeout);
public void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, IntPtr name);
public int GetFragDataIndex(uint program, IntPtr name);
public void GenSamplers(int count, IntPtr samplers);
public void DeleteSamplers(int count, IntPtr samplers);
public bool IsSampler(uint shader);
public void BindSampler(uint unit, uint sampler);
public void SamplerParameteri(uint sampler, uint pname, int param);
public void SamplerParameteriv(uint sampler, uint pname, IntPtr param);
public void SamplerParameterf(uint sampler, uint pname, float param);
public void SamplerParameterfv(uint sampler, uint pname, IntPtr param);
public void SamplerParameterIiv(uint sampler, uint pname, IntPtr param);
public void SamplerParameterIuiv(uint sampler, uint pname, IntPtr param);
public void GetSamplerParameteriv(uint sampler, uint pname, IntPtr _params);
public void GetSamplerParameterIiv(uint sampler, uint pname, IntPtr _params);
public void GetSamplerParameterfv(uint sampler, uint pname, IntPtr _params);
public void GetSamplerParameterIuiv(uint sampler, uint pname, IntPtr _params);
public void QueryCounter(uint id, uint target);
public void GetQueryObjecti64v(uint id, uint pname, IntPtr _params);
public void GetQueryObjectui64v(uint id, uint pname, IntPtr _params);
public void VertexAttribDivisor(uint index, uint divisor);
public void VertexAttribP1ui(uint index, uint type, bool normalized, uint value);
public void VertexAttribP1uiv(uint index, uint type, bool normalized, IntPtr value);
public void VertexAttribP2ui(uint index, uint type, bool normalized, uint value);
public void VertexAttribP2uiv(uint index, uint type, bool normalized, IntPtr value);
public void VertexAttribP3ui(uint index, uint type, bool normalized, uint value);
public void VertexAttribP3uiv(uint index, uint type, bool normalized, IntPtr value);
public void VertexAttribP4ui(uint index, uint type, bool normalized, uint value);
public void VertexAttribP4uiv(uint index, uint type, bool normalized, IntPtr value);

############################################################
# OVERLOADS

public void BlendColor(Color4 color);
public void BlitFramebuffer(Vector2i src0, Vector2i src1, Vector2i dst0, Vector2i dst1, uint mask, uint filter);

public void ClearBufferfv(uint buffer, int drawbuffer, inptr<Color4> value);
public void ClearBufferfv(uint buffer, int drawbuffer, inptr<float> value);

public void ClearBufferiv(uint buffer, int drawbuffer, inptr<Color4i> value);
public void ClearBufferiv(uint buffer, int drawbuffer, inptr<int> value);

public void ClearBufferuiv(uint buffer, int drawbuffer, inptr<Color4ui> value);
public void ClearBufferuiv(uint buffer, int drawbuffer, inptr<uint> value);

public void ClearColor(Color4 color);

public void CompressedTexSubImage2D(uint target, int level, Box2i imagePosition, uint format, int imageSize, IntPtr data);
public void CompressedTexSubImage3D(uint target, int level, Box3i imagePosition, uint format, int imageSize, IntPtr data);

public void CopyTexImage1D(uint target, int level, uint internalformat, Vector2i imagePosition, int width, int border);
public void CopyTexImage2D(uint target, int level, uint internalformat, Vector2i imagePosition, Vector2i imageSize, int border);
public void CopyTexImage2D(uint target, int level, uint internalformat, Box2i image, int border);

public void CopyTexSubImage1D(uint target, int level, int xoffset, Vector2i imagePosition, int width);
public void CopyTexSubImage2D(uint target, int level, Vector2i texturePosition, Vector2i imagePosition, Vector2i size);
public void CopyTexSubImage3D(uint target, int level, Vector3i texturePosition, Vector2i imagePosition, Vector2i size);

public void DeleteBuffers(int n, uint[] buffers);
public void DeleteBuffers(int n, inptr<uint> buffers);

public void DeleteFramebuffers(int n, uint[] framebuffers);
public void DeleteFramebuffers(int n, inptr<uint> framebuffers);

public void DeleteQueries(int n, uint[] ids);
public void DeleteQueries(int n, inptr<uint> ids);

public void DeleteRenderbuffers(int n, uint[] renderbuffers);
public void DeleteRenderbuffers(int n, inptr<uint> renderbuffers);

public void DeleteSamplers(int n, uint[] samplers);
public void DeleteSamplers(int n, inptr<uint> samplers);

private void DeleteTextures(int n, uint[] textures);
private void DeleteTextures(int n, inptr<uint> textures);

public void DeleteVertexArrays(int n, uint[] arrays);
public void DeleteVertexArrays(int n, inptr<uint> arrays);

public void DrawBuffers(int n, uint[] bufs);
public void DrawBuffers(int n, inptr<uint> bufs);

public void DrawElements(uint mode, int count, uint type, byte[] indices);
public void DrawElements(uint mode, int count, uint type, ushort[] indices);
public void DrawElements(uint mode, int count, uint type, uint[] indices);

public void DrawElementsBaseVertex(uint mode, int count, uint type, byte[] indices, int basevertex);
public void DrawElementsBaseVertex(uint mode, int count, uint type, ushort[] indices, int basevertex);
public void DrawElementsBaseVertex(uint mode, int count, uint type, uint[] indices, int basevertex);

public void DrawElementsInstanced(uint mode, int count, uint type, byte[] indices, int instancecount);
public void DrawElementsInstanced(uint mode, int count, uint type, ushort[] indices, int instancecount);
public void DrawElementsInstanced(uint mode, int count, uint type, uint[] indices, int instancecount);

public void DrawElementsInstancedBaseVertex(uint mode, int count, uint type, byte[] indices, int instancecount, int basevertex);
public void DrawElementsInstancedBaseVertex(uint mode, int count, uint type, ushort[] indices, int instancecount, int basevertex);
public void DrawElementsInstancedBaseVertex(uint mode, int count, uint type, uint[] indices, int instancecount, int basevertex);

public void DrawRangeElements(uint mode, uint start, uint end, int count, uint type, byte[] indices);
public void DrawRangeElements(uint mode, uint start, uint end, int count, uint type, ushort[] indices);
public void DrawRangeElements(uint mode, uint start, uint end, int count, uint type, uint[] indices);

public void DrawRangeElementsBaseVertex(uint mode, uint start, uint end, int count, uint type, byte[] indices, int basevertex);
public void DrawRangeElementsBaseVertex(uint mode, uint start, uint end, int count, uint type, ushort[] indices, int basevertex);
public void DrawRangeElementsBaseVertex(uint mode, uint start, uint end, int count, uint type, uint[] indices, int basevertex);


public void GenBuffers(int n, uint[] buffers);
public void GenBuffers(int n, outptr<uint> buffers);

public void GenFramebuffers(int n, uint[] framebuffers);
public void GenFramebuffers(int n, outptr<uint> framebuffers);

public void GenQueries(int n, uint[] ids);
public void GenQueries(int n, outptr<uint> ids);

public void GenRenderbuffers(int n, uint[] renderbuffers);
public void GenRenderbuffers(int n, outptr<uint> renderbuffers);

public void GenSamplers(int n, uint[] samplers);
public void GenSamplers(int n, outptr<uint> samplers);

private void GenTextures(int n, uint[] textures);
private void GenTextures(int n, outptr<uint> textures);

public void GenVertexArrays(int n, uint[] arrays);
public void GenVertexArrays(int n, outptr<uint> arrays);

public void GetActiveAttrib(uint program, uint index, int bufSize, outptr<int> length, outptr<int> size, outptr<uint> type, byte[] name);
public void GetActiveUniform(uint program, uint index, int bufSize, outptr<int> length, outptr<int> size, outptr<uint> type, byte[] name);


public void GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, uint pname, int[] _params);
public void GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, uint pname, outptr<int> _params);

public void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, outptr<int> length, byte[] uniformBlockName);

public void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, outptr<int> length, byte[] uniformName);

public void GetActiveUniformsiv(uint program, int uniformCount, uint[] uniformIndices, uint pname, int[] _params);
public void GetActiveUniformsiv(uint program, int uniformCount, outptr<int> uniformIndices, uint pname, int[] _params);

public void GetActiveUniformsiv(uint program, int uniformCount, uint[] uniformIndices, uint pname, inptr<int> _params);
public void GetActiveUniformsiv(uint program, int uniformCount, outptr<int> uniformIndices, uint pname, inptr<int> _params);

public int GetAttribLocation(uint program, byte[] name);
public int GetAttribLocation(uint program, string name);

public void GetAttachedShaders(uint program, int maxCount, uint count, uint[] shaders);

public void GetBooleani_v(uint target, uint index, outptr<bool> data);
public void GetBooleanv(uint pname, outptr<bool> data);

public void GetBufferParameteri64v(uint target, uint pname, outptr<long> _params);
public void GetBufferParameteriv(uint target, uint pname, outptr<int> _params);
public void GetBufferPointerv(uint target, uint pname, outptr<IntPtr> _params);

public void GetDoublev(uint pname, double[] data);
public void GetDoublev(uint pname, outptr<double> data);
public void GetDoublev(uint pname, outptr<Vector2d> data);
public void GetDoublev(uint pname, outptr<Vector3d> data);
public void GetDoublev(uint pname, outptr<Vector4d> data);
public void GetDoublev(uint pname, outptr<Color3d> data);
public void GetDoublev(uint pname, outptr<Color4d> data);
public void GetDoublev(uint pname, outptr<Box2d> data);
public void GetDoublev(uint pname, outptr<Box3d> data);

public void GetFloatv(uint pname, float[] data);
public void GetFloatv(uint pname, outptr<float> data);
public void GetFloatv(uint pname, outptr<Vector2> data);
public void GetFloatv(uint pname, outptr<Vector3> data);
public void GetFloatv(uint pname, outptr<Vector4> data);
public void GetFloatv(uint pname, outptr<Color3> data);
public void GetFloatv(uint pname, outptr<Color4> data);
public void GetFloatv(uint pname, outptr<Box2> data);
public void GetFloatv(uint pname, outptr<Box3> data);

public void GetFramebufferAttachmentParameteriv(uint target, uint attachment, uint pname, outptr<int> _params);

public void GetInteger64i_v(uint target, uint index, long[] data);
public void GetInteger64i_v(uint target, uint index, outptr<long> data);

public void GetInteger64v(uint pname, long[] data);
public void GetInteger64v(uint pname, outptr<long> data);

public void GetIntegeri_v(uint target, uint index, int[] data);
public void GetIntegeri_v(uint target, uint index, outptr<int> data);

public void GetIntegerv(uint pname, int[] data);
public void GetIntegerv(uint pname, outptr<int> data);

public void GetMultisamplefv(uint pname, uint index, outptr<float> val);


public void GetProgramInfoLog(uint program, int bufSize, outptr<int> length, byte[] infoLog);

public void GetProgramiv(uint program, uint pname, int[] _params);
public void GetProgramiv(uint program, uint pname, outptr<int> _params);

# public void GetQueryiv(uint target, uint pname, IntPtr _params);
# public void GetQueryObjectiv(uint id, uint pname, IntPtr _params);
# public void GetQueryObjectuiv(uint id, uint pname, IntPtr _params);
# public void GetRenderbufferParameteriv(uint target, uint pname, IntPtr _params);

public void GetShaderInfoLog(uint shader, int bufSize, outptr<int> length, byte[] infoLog);

public void GetShaderiv(uint shader, uint pname, int[] _params);
public void GetShaderiv(uint shader, uint pname, outptr<int> _params);

# public void GetShaderSource(uint shader, int bufSize, IntPtr length, string source);
# public IntPtr GetString(uint name);
# public IntPtr GetStringi(uint name, uint index);
# public void GetSynciv(IntPtr sync, uint pname, int bufSize, IntPtr length, IntPtr values);
# public void GetTexImage(uint target, int level, uint format, uint type, IntPtr pixels);
# public void GetTexLevelParameterfv(uint target, int level, uint pname, IntPtr _params);
# public void GetTexLevelParameteriv(uint target, int level, uint pname, IntPtr _params);
# public void GetTexParameterfv(uint target, uint pname, IntPtr _params);
# public void GetTexParameterIiv(uint target, uint pname, IntPtr _params);
# public void GetTexParameterIuiv(uint target, uint pname, IntPtr _params);
# public void GetTexParameteriv(uint target, uint pname, IntPtr _params);
# public void GetTransformFeedbackVarying(uint program, uint index, int bufSize, IntPtr length, IntPtr size, IntPtr type, string name);
# public uint GetUniformBlockIndex(uint program, string uniformBlockName);
# public void GetUniformfv(uint program, int location, IntPtr _params);
# public void GetUniformIndices(uint program, int uniformCount, IntPtr uniformNames, IntPtr uniformIndices);
# public void GetUniformiv(uint program, int location, IntPtr _params);

public int GetUniformLocation(uint program, byte[] name);
public int GetUniformLocation(uint program, string name);

# public void GetUniformuiv(uint program, int location, IntPtr _params);
# public void GetVertexAttribdv(uint index, uint pname, IntPtr _params);
# public void GetVertexAttribfv(uint index, uint pname, IntPtr _params);
# public void GetVertexAttribIiv(uint index, uint pname, IntPtr _params);
# public void GetVertexAttribIuiv(uint index, uint pname, IntPtr _params);
# public void GetVertexAttribiv(uint index, uint pname, IntPtr _params);
# public void GetVertexAttribPointerv(uint index, uint pname, IntPtr pointer);
# public IntPtr MapBuffer(uint target, uint access);
# public IntPtr MapBufferRange(uint target, IntPtr offset, IntPtr length, uint access);
# public void MultiDrawArrays(uint mode, IntPtr first, IntPtr count, int drawcount);
# public void MultiDrawElements(uint mode, IntPtr count, uint type, IntPtr indices, int drawcount);
# public void MultiDrawElementsBaseVertex(uint mode, IntPtr count, uint type, IntPtr indices, int drawcount, IntPtr basevertex);
# public void PointParameterfv(uint pname, IntPtr _params);
# public void PointParameteriv(uint pname, IntPtr _params);
# public void ReadPixels(int x, int y, int width, int height, uint format, uint type, IntPtr pixels);
# public void RenderbufferStorage(uint target, uint internalformat, int width, int height);
# public void RenderbufferStorageMultisample(uint target, int samples, uint internalformat, int width, int height);
# public void Scissor(int x, int y, int width, int height);
# public void ShaderSource(uint shader, int count, IntPtr _string, IntPtr length);

public void ShaderSource(uint shader, int count, IntPtr[] _string, int[] length);

# public void TexImage1D(uint target, int level, int internalformat, int width, int border, uint format, uint type, IntPtr pixels);
# public void TexImage2D(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, IntPtr pixels);
# public void TexImage2DMultisample(uint target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations);
# public void TexImage3D(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, IntPtr pixels);
# public void TexImage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations);
# public void TexParameterfv(uint target, uint pname, IntPtr _params);
# public void TexParameterIiv(uint target, uint pname, IntPtr _params);
# public void TexParameterIuiv(uint target, uint pname, IntPtr _params);
# public void TexParameteriv(uint target, uint pname, IntPtr _params);
# public void TexSubImage1D(uint target, int level, int xoffset, int width, uint format, uint type, IntPtr pixels);
# public void TexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, IntPtr pixels);
# public void TexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, IntPtr pixels);
# public void TransformFeedbackVaryings(uint program, int count, IntPtr varyings, uint bufferMode);
# public void Uniform1f(int location, float v0);
# public void Uniform1fv(int location, int count, IntPtr value);
# public void Uniform1i(int location, int v0);
# public void Uniform1iv(int location, int count, IntPtr value);
# public void Uniform1ui(int location, uint v0);
# public void Uniform1uiv(int location, int count, IntPtr value);
# public void Uniform2f(int location, float v0, float v1);

public void Uniform2f(int location, Vector2 value);

# public void Uniform2fv(int location, int count, IntPtr value);
# public void Uniform2i(int location, int v0, int v1);

public void Uniform2i(int location, Vector2i value);

# public void Uniform2iv(int location, int count, IntPtr value);
# public void Uniform2ui(int location, uint v0, uint v1);
# public void Uniform2uiv(int location, int count, IntPtr value);
# public void Uniform3f(int location, float v0, float v1, float v2);

public void Uniform3f(int location, Vector3 value);

# public void Uniform3fv(int location, int count, IntPtr value);
# public void Uniform3i(int location, int v0, int v1, int v2);
# public void Uniform3iv(int location, int count, IntPtr value);
# public void Uniform3ui(int location, uint v0, uint v1, uint v2);
# public void Uniform3uiv(int location, int count, IntPtr value);
# public void Uniform4f(int location, float v0, float v1, float v2, float v3);

public void Uniform4f(int location, Vector4 value);

# public void Uniform4fv(int location, int count, IntPtr value);
# public void Uniform4i(int location, int v0, int v1, int v2, int v3);
# public void Uniform4iv(int location, int count, IntPtr value);
# public void Uniform4ui(int location, uint v0, uint v1, uint v2, uint v3);
# public void Uniform4uiv(int location, int count, IntPtr value);
# public void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding);

public void UniformMatrix2fv(int location, int count, bool transpose, float[] value);
public void UniformMatrix2fv(int location, int count, bool transpose, inptr<Matrix2> value);

# public void UniformMatrix2x3fv(int location, int count, bool transpose, IntPtr value);
# public void UniformMatrix2x4fv(int location, int count, bool transpose, IntPtr value);

public void UniformMatrix3fv(int location, int count, bool transpose, float[] value);
public void UniformMatrix3fv(int location, int count, bool transpose, inptr<Matrix3> value);

# public void UniformMatrix3x2fv(int location, int count, bool transpose, IntPtr value);
# public void UniformMatrix3x4fv(int location, int count, bool transpose, IntPtr value);

public void UniformMatrix4fv(int location, int count, bool transpose, float[] value);
public void UniformMatrix4fv(int location, int count, bool transpose, inptr<Matrix4> value);

# public void UniformMatrix4x2fv(int location, int count, bool transpose, IntPtr value);
# public void UniformMatrix4x3fv(int location, int count, bool transpose, IntPtr value);
# public void VertexAttribDivisor(uint index, uint divisor);
# public void VertexAttribP1ui(uint index, uint type, bool normalized, uint value);
# public void VertexAttribP1uiv(uint index, uint type, bool normalized, IntPtr value);
# public void VertexAttribP2ui(uint index, uint type, bool normalized, uint value);
# public void VertexAttribP2uiv(uint index, uint type, bool normalized, IntPtr value);
# public void VertexAttribP3ui(uint index, uint type, bool normalized, uint value);
# public void VertexAttribP3uiv(uint index, uint type, bool normalized, IntPtr value);
# public void VertexAttribP4ui(uint index, uint type, bool normalized, uint value);
# public void VertexAttribP4uiv(uint index, uint type, bool normalized, IntPtr value);
# public void VertexAttrib1d(uint index, double x);
# public void VertexAttrib1dv(uint index, IntPtr v);
# public void VertexAttrib1f(uint index, float x);
# public void VertexAttrib1fv(uint index, IntPtr v);
# public void VertexAttrib1s(uint index, short x);
# public void VertexAttrib1sv(uint index, IntPtr v);
# public void VertexAttrib2d(uint index, double x, double y);
# public void VertexAttrib2dv(uint index, IntPtr v);
# public void VertexAttrib2f(uint index, float x, float y);
# public void VertexAttrib2fv(uint index, IntPtr v);
# public void VertexAttrib2s(uint index, short x, short y);
# public void VertexAttrib2sv(uint index, IntPtr v);
# public void VertexAttrib3d(uint index, double x, double y, double z);
# public void VertexAttrib3dv(uint index, IntPtr v);
# public void VertexAttrib3f(uint index, float x, float y, float z);
# public void VertexAttrib3fv(uint index, IntPtr v);
# public void VertexAttrib3s(uint index, short x, short y, short z);
# public void VertexAttrib3sv(uint index, IntPtr v);
# public void VertexAttrib4bv(uint index, IntPtr v);
# public void VertexAttrib4d(uint index, double x, double y, double z, double w);
# public void VertexAttrib4dv(uint index, IntPtr v);
# public void VertexAttrib4f(uint index, float x, float y, float z, float w);
# public void VertexAttrib4fv(uint index, IntPtr v);
# public void VertexAttrib4iv(uint index, IntPtr v);
# public void VertexAttrib4Nbv(uint index, IntPtr v);
# public void VertexAttrib4Niv(uint index, IntPtr v);
# public void VertexAttrib4Nsv(uint index, IntPtr v);
# public void VertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w);
# public void VertexAttrib4Nubv(uint index, IntPtr v);
# public void VertexAttrib4Nuiv(uint index, IntPtr v);
# public void VertexAttrib4Nusv(uint index, IntPtr v);
# public void VertexAttrib4s(uint index, short x, short y, short z, short w);
# public void VertexAttrib4sv(uint index, IntPtr v);
# public void VertexAttrib4ubv(uint index, IntPtr v);
# public void VertexAttrib4uiv(uint index, IntPtr v);
# public void VertexAttrib4usv(uint index, IntPtr v);
# public void VertexAttribI1i(uint index, int x);
# public void VertexAttribI1iv(uint index, IntPtr v);
# public void VertexAttribI1ui(uint index, uint x);
# public void VertexAttribI1uiv(uint index, IntPtr v);
# public void VertexAttribI2i(uint index, int x, int y);
# public void VertexAttribI2iv(uint index, IntPtr v);
# public void VertexAttribI2ui(uint index, uint x, uint y);
# public void VertexAttribI2uiv(uint index, IntPtr v);
# public void VertexAttribI3i(uint index, int x, int y, int z);
# public void VertexAttribI3iv(uint index, IntPtr v);
# public void VertexAttribI3ui(uint index, uint x, uint y, uint z);
# public void VertexAttribI3uiv(uint index, IntPtr v);
# public void VertexAttribI4bv(uint index, IntPtr v);
# public void VertexAttribI4i(uint index, int x, int y, int z, int w);
# public void VertexAttribI4iv(uint index, IntPtr v);
# public void VertexAttribI4sv(uint index, IntPtr v);
# public void VertexAttribI4ubv(uint index, IntPtr v);
# public void VertexAttribI4ui(uint index, uint x, uint y, uint z, uint w);
# public void VertexAttribI4uiv(uint index, IntPtr v);
# public void VertexAttribI4usv(uint index, IntPtr v);
# public void VertexAttribIPointer(uint index, int size, uint type, int stride, IntPtr pointer);
# public void VertexAttribPointer(uint index, int size, uint type, bool normalized, int stride, IntPtr pointer);
# public void Viewport(int x, int y, int width, int height);
# public void WaitSync(IntPtr sync, uint flags, ulong timeout);
# public void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, IntPtr name);
# public int GetFragDataIndex(uint program, IntPtr name);
# public void BindSampler(uint unit, uint sampler);
# public void SamplerParameteri(uint sampler, uint pname, int param);
# public void SamplerParameteriv(uint sampler, uint pname, IntPtr param);
# public void SamplerParameterf(uint sampler, uint pname, float param);
# public void SamplerParameterfv(uint sampler, uint pname, IntPtr param);
# public void SamplerParameterIiv(uint sampler, uint pname, IntPtr param);
# public void SamplerParameterIuiv(uint sampler, uint pname, IntPtr param);
# public void GetSamplerParameteriv(uint sampler, uint pname, IntPtr _params);
# public void GetSamplerParameterIiv(uint sampler, uint pname, IntPtr _params);
# public void GetSamplerParameterfv(uint sampler, uint pname, IntPtr _params);
# public void GetSamplerParameterIuiv(uint sampler, uint pname, IntPtr _params);
# public void QueryCounter(uint id, uint target);
# public void GetQueryObjecti64v(uint id, uint pname, IntPtr _params);
# public void GetQueryObjectui64v(uint id, uint pname, IntPtr _params);




public void Viewport(Box2i dimensions);


############################################################
# ENUMS

uint ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x00008B8A;
uint ACTIVE_ATTRIBUTES = 0x00008B89;
uint ACTIVE_TEXTURE = 0x000084E0;
uint ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x00008A35;
uint ACTIVE_UNIFORM_BLOCKS = 0x00008A36;
uint ACTIVE_UNIFORM_MAX_LENGTH = 0x00008B87;
uint ACTIVE_UNIFORMS = 0x00008B86;
uint ALIASED_LINE_WIDTH_RANGE = 0x0000846E;
uint ALPHA = 0x00001906;
uint ALREADY_SIGNALED = 0x0000911A;
uint ALWAYS = 0x00000207;
uint AND = 0x00001501;
uint AND_INVERTED = 0x00001504;
uint AND_REVERSE = 0x00001502;
uint ARRAY_BUFFER = 0x00008892;
uint ARRAY_BUFFER_BINDING = 0x00008894;
uint ATTACHED_SHADERS = 0x00008B85;
uint BACK = 0x00000405;
uint BACK_LEFT = 0x00000402;
uint BACK_RIGHT = 0x00000403;
uint BGR = 0x000080E0;
uint BGR_INTEGER = 0x00008D9A;
uint BGRA = 0x000080E1;
uint BGRA_INTEGER = 0x00008D9B;
uint BLEND = 0x00000BE2;
uint BLEND_DST = 0x00000BE0;
uint BLEND_DST_ALPHA = 0x000080CA;
uint BLEND_DST_RGB = 0x000080C8;
uint BLEND_EQUATION_ALPHA = 0x0000883D;
uint BLEND_EQUATION_RGB = 0x00008009;
uint BLEND_SRC = 0x00000BE1;
uint BLEND_SRC_ALPHA = 0x000080CB;
uint BLEND_SRC_RGB = 0x000080C9;
uint BLUE = 0x00001905;
uint BLUE_INTEGER = 0x00008D96;
uint BOOL = 0x00008B56;
uint BOOL_VEC2 = 0x00008B57;
uint BOOL_VEC3 = 0x00008B58;
uint BOOL_VEC4 = 0x00008B59;
uint BUFFER_ACCESS = 0x000088BB;
uint BUFFER_ACCESS_FLAGS = 0x0000911F;
uint BUFFER_MAP_LENGTH = 0x00009120;
uint BUFFER_MAP_OFFSET = 0x00009121;
uint BUFFER_MAP_POINTER = 0x000088BD;
uint BUFFER_MAPPED = 0x000088BC;
uint BUFFER_SIZE = 0x00008764;
uint BUFFER_USAGE = 0x00008765;
uint BYTE = 0x00001400;
uint CCW = 0x00000901;
uint CLAMP_READ_COLOR = 0x0000891C;
uint CLAMP_TO_BORDER = 0x0000812D;
uint CLAMP_TO_EDGE = 0x0000812F;
uint CLEAR = 0x00001500;
uint CLIP_DISTANCE0 = 0x00003000;
uint CLIP_DISTANCE1 = 0x00003001;
uint CLIP_DISTANCE2 = 0x00003002;
uint CLIP_DISTANCE3 = 0x00003003;
uint CLIP_DISTANCE4 = 0x00003004;
uint CLIP_DISTANCE5 = 0x00003005;
uint CLIP_DISTANCE6 = 0x00003006;
uint CLIP_DISTANCE7 = 0x00003007;
uint COLOR = 0x00001800;
uint COLOR_ATTACHMENT0 = 0x00008CE0;
uint COLOR_ATTACHMENT1 = 0x00008CE1;
uint COLOR_ATTACHMENT10 = 0x00008CEA;
uint COLOR_ATTACHMENT11 = 0x00008CEB;
uint COLOR_ATTACHMENT12 = 0x00008CEC;
uint COLOR_ATTACHMENT13 = 0x00008CED;
uint COLOR_ATTACHMENT14 = 0x00008CEE;
uint COLOR_ATTACHMENT15 = 0x00008CEF;
uint COLOR_ATTACHMENT2 = 0x00008CE2;
uint COLOR_ATTACHMENT3 = 0x00008CE3;
uint COLOR_ATTACHMENT4 = 0x00008CE4;
uint COLOR_ATTACHMENT5 = 0x00008CE5;
uint COLOR_ATTACHMENT6 = 0x00008CE6;
uint COLOR_ATTACHMENT7 = 0x00008CE7;
uint COLOR_ATTACHMENT8 = 0x00008CE8;
uint COLOR_ATTACHMENT9 = 0x00008CE9;
uint COLOR_BUFFER_BIT = 0x00004000;
uint COLOR_CLEAR_VALUE = 0x00000C22;
uint COLOR_LOGIC_OP = 0x00000BF2;
uint COLOR_WRITEMASK = 0x00000C23;
uint COMPARE_REF_TO_TEXTURE = 0x0000884E;
uint COMPILE_STATUS = 0x00008B81;
uint COMPRESSED_RED = 0x00008225;
uint COMPRESSED_RED_RGTC1 = 0x00008DBB;
uint COMPRESSED_RG = 0x00008226;
uint COMPRESSED_RG_RGTC2 = 0x00008DBD;
uint COMPRESSED_RGB = 0x000084ED;
uint COMPRESSED_RGBA = 0x000084EE;
uint COMPRESSED_SIGNED_RED_RGTC1 = 0x00008DBC;
uint COMPRESSED_SIGNED_RG_RGTC2 = 0x00008DBE;
uint COMPRESSED_SRGB = 0x00008C48;
uint COMPRESSED_SRGB_ALPHA = 0x00008C49;
uint COMPRESSED_TEXTURE_FORMATS = 0x000086A3;
uint CONDITION_SATISFIED = 0x0000911C;
uint CONSTANT_ALPHA = 0x00008003;
uint CONSTANT_COLOR = 0x00008001;
uint CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
uint CONTEXT_CORE_PROFILE_BIT = 0x00000001;
uint CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
uint CONTEXT_FLAGS = 0x0000821E;
uint CONTEXT_PROFILE_MASK = 0x00009126;
uint COPY = 0x00001503;
uint COPY_INVERTED = 0x0000150C;
uint COPY_READ_BUFFER = 0x00008F36;
uint COPY_WRITE_BUFFER = 0x00008F37;
uint CULL_FACE = 0x00000B44;
uint CULL_FACE_MODE = 0x00000B45;
uint CURRENT_PROGRAM = 0x00008B8D;
uint CURRENT_QUERY = 0x00008865;
uint CURRENT_VERTEX_ATTRIB = 0x00008626;
uint CW = 0x00000900;
uint DECR = 0x00001E03;
uint DECR_WRAP = 0x00008508;
uint DELETE_STATUS = 0x00008B80;
uint DEPTH = 0x00001801;
uint DEPTH_ATTACHMENT = 0x00008D00;
uint DEPTH_BUFFER_BIT = 0x00000100;
uint DEPTH_CLAMP = 0x0000864F;
uint DEPTH_CLEAR_VALUE = 0x00000B73;
uint DEPTH_COMPONENT = 0x00001902;
uint DEPTH_COMPONENT16 = 0x000081A5;
uint DEPTH_COMPONENT24 = 0x000081A6;
uint DEPTH_COMPONENT32 = 0x000081A7;
uint DEPTH_COMPONENT32F = 0x00008CAC;
uint DEPTH_FUNC = 0x00000B74;
uint DEPTH_RANGE = 0x00000B70;
uint DEPTH_STENCIL = 0x000084F9;
uint DEPTH_STENCIL_ATTACHMENT = 0x0000821A;
uint DEPTH_TEST = 0x00000B71;
uint DEPTH_WRITEMASK = 0x00000B72;
uint DEPTH24_STENCIL8 = 0x000088F0;
uint DEPTH32F_STENCIL8 = 0x00008CAD;
uint DITHER = 0x00000BD0;
uint DONT_CARE = 0x00001100;
uint DOUBLE = 0x0000140A;
uint DOUBLEBUFFER = 0x00000C32;
uint DRAW_BUFFER = 0x00000C01;
uint DRAW_BUFFER0 = 0x00008825;
uint DRAW_BUFFER1 = 0x00008826;
uint DRAW_BUFFER10 = 0x0000882F;
uint DRAW_BUFFER11 = 0x00008830;
uint DRAW_BUFFER12 = 0x00008831;
uint DRAW_BUFFER13 = 0x00008832;
uint DRAW_BUFFER14 = 0x00008833;
uint DRAW_BUFFER15 = 0x00008834;
uint DRAW_BUFFER2 = 0x00008827;
uint DRAW_BUFFER3 = 0x00008828;
uint DRAW_BUFFER4 = 0x00008829;
uint DRAW_BUFFER5 = 0x0000882A;
uint DRAW_BUFFER6 = 0x0000882B;
uint DRAW_BUFFER7 = 0x0000882C;
uint DRAW_BUFFER8 = 0x0000882D;
uint DRAW_BUFFER9 = 0x0000882E;
uint DRAW_FRAMEBUFFER = 0x00008CA9;
uint DRAW_FRAMEBUFFER_BINDING = 0x00008CA6;
uint DST_ALPHA = 0x00000304;
uint DST_COLOR = 0x00000306;
uint DYNAMIC_COPY = 0x000088EA;
uint DYNAMIC_DRAW = 0x000088E8;
uint DYNAMIC_READ = 0x000088E9;
uint ELEMENT_ARRAY_BUFFER = 0x00008893;
uint ELEMENT_ARRAY_BUFFER_BINDING = 0x00008895;
uint EQUAL = 0x00000202;
uint EQUIV = 0x00001509;
uint EXTENSIONS = 0x00001F03;
uint FALSE = 0x00000000;
uint FASTEST = 0x00001101;
uint FILL = 0x00001B02;
uint FIRST_VERTEX_CONVENTION = 0x00008E4D;
uint FIXED_ONLY = 0x0000891D;
uint FLOAT = 0x00001406;
uint FLOAT_32_UNSIGNED_INT_24_8_REV = 0x00008DAD;
uint FLOAT_MAT2 = 0x00008B5A;
uint FLOAT_MAT2x3 = 0x00008B65;
uint FLOAT_MAT2x4 = 0x00008B66;
uint FLOAT_MAT3 = 0x00008B5B;
uint FLOAT_MAT3x2 = 0x00008B67;
uint FLOAT_MAT3x4 = 0x00008B68;
uint FLOAT_MAT4 = 0x00008B5C;
uint FLOAT_MAT4x2 = 0x00008B69;
uint FLOAT_MAT4x3 = 0x00008B6A;
uint FLOAT_VEC2 = 0x00008B50;
uint FLOAT_VEC3 = 0x00008B51;
uint FLOAT_VEC4 = 0x00008B52;
uint FRAGMENT_SHADER = 0x00008B30;
uint FRAGMENT_SHADER_DERIVATIVE_HINT = 0x00008B8B;
uint FRAMEBUFFER = 0x00008D40;
uint FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x00008215;
uint FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x00008214;
uint FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x00008210;
uint FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x00008211;
uint FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x00008216;
uint FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x00008213;
uint FRAMEBUFFER_ATTACHMENT_LAYERED = 0x00008DA7;
uint FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x00008CD1;
uint FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x00008CD0;
uint FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x00008212;
uint FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x00008217;
uint FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x00008CD3;
uint FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x00008CD4;
uint FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x00008CD2;
uint FRAMEBUFFER_BINDING = 0x00008CA6;
uint FRAMEBUFFER_COMPLETE = 0x00008CD5;
uint FRAMEBUFFER_DEFAULT = 0x00008218;
uint FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x00008CD6;
uint FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x00008CDB;
uint FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x00008DA8;
uint FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x00008CD7;
uint FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x00008D56;
uint FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x00008CDC;
uint FRAMEBUFFER_SRGB = 0x00008DB9;
uint FRAMEBUFFER_UNDEFINED = 0x00008219;
uint FRAMEBUFFER_UNSUPPORTED = 0x00008CDD;
uint FRONT = 0x00000404;
uint FRONT_AND_BACK = 0x00000408;
uint FRONT_FACE = 0x00000B46;
uint FRONT_LEFT = 0x00000400;
uint FRONT_RIGHT = 0x00000401;
uint FUNC_ADD = 0x00008006;
uint FUNC_REVERSE_SUBTRACT = 0x0000800B;
uint FUNC_SUBTRACT = 0x0000800A;
uint GEOMETRY_INPUT_TYPE = 0x00008917;
uint GEOMETRY_OUTPUT_TYPE = 0x00008918;
uint GEOMETRY_SHADER = 0x00008DD9;
uint GEOMETRY_VERTICES_OUT = 0x00008916;
uint GEQUAL = 0x00000206;
uint GREATER = 0x00000204;
uint GREEN = 0x00001904;
uint GREEN_INTEGER = 0x00008D95;
uint HALF_FLOAT = 0x0000140B;
uint INCR = 0x00001E02;
uint INCR_WRAP = 0x00008507;
uint INDEX = 0x00008222;
uint INFO_LOG_LENGTH = 0x00008B84;
uint INT = 0x00001404;
uint INT_SAMPLER_1D = 0x00008DC9;
uint INT_SAMPLER_1D_ARRAY = 0x00008DCE;
uint INT_SAMPLER_2D = 0x00008DCA;
uint INT_SAMPLER_2D_ARRAY = 0x00008DCF;
uint INT_SAMPLER_2D_MULTISAMPLE = 0x00009109;
uint INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910C;
uint INT_SAMPLER_2D_RECT = 0x00008DCD;
uint INT_SAMPLER_3D = 0x00008DCB;
uint INT_SAMPLER_BUFFER = 0x00008DD0;
uint INT_SAMPLER_CUBE = 0x00008DCC;
uint INT_VEC2 = 0x00008B53;
uint INT_VEC3 = 0x00008B54;
uint INT_VEC4 = 0x00008B55;
uint INTERLEAVED_ATTRIBS = 0x00008C8C;
uint INVALID_ENUM = 0x00000500;
uint INVALID_FRAMEBUFFER_OPERATION = 0x00000506;
uint INVALID_INDEX = 0xFFFFFFFF;
uint INVALID_OPERATION = 0x00000502;
uint INVALID_VALUE = 0x00000501;
uint INVERT = 0x0000150A;
uint KEEP = 0x00001E00;
uint LAST_VERTEX_CONVENTION = 0x00008E4E;
uint LEFT = 0x00000406;
uint LEQUAL = 0x00000203;
uint LESS = 0x00000201;
uint LINE = 0x00001B01;
uint LINE_LOOP = 0x00000002;
uint LINE_SMOOTH = 0x00000B20;
uint LINE_SMOOTH_HINT = 0x00000C52;
uint LINE_STRIP = 0x00000003;
uint LINE_STRIP_ADJACENCY = 0x0000000B;
uint LINE_WIDTH = 0x00000B21;
uint LINE_WIDTH_GRANULARITY = 0x00000B23;
uint LINE_WIDTH_RANGE = 0x00000B22;
uint LINEAR = 0x00002601;
uint LINEAR_MIPMAP_LINEAR = 0x00002703;
uint LINEAR_MIPMAP_NEAREST = 0x00002701;
uint LINES = 0x00000001;
uint LINES_ADJACENCY = 0x0000000A;
uint LINK_STATUS = 0x00008B82;
uint LOGIC_OP_MODE = 0x00000BF0;
uint LOWER_LEFT = 0x00008CA1;
uint MAJOR_VERSION = 0x0000821B;
uint MAP_FLUSH_EXPLICIT_BIT = 0x00000010;
uint MAP_INVALIDATE_BUFFER_BIT = 0x00000008;
uint MAP_INVALIDATE_RANGE_BIT = 0x00000004;
uint MAP_READ_BIT = 0x00000001;
uint MAP_UNSYNCHRONIZED_BIT = 0x00000020;
uint MAP_WRITE_BIT = 0x00000002;
uint MAX = 0x00008008;
uint MAX_3D_TEXTURE_SIZE = 0x00008073;
uint MAX_ARRAY_TEXTURE_LAYERS = 0x000088FF;
uint MAX_CLIP_DISTANCES = 0x00000D32;
uint MAX_COLOR_ATTACHMENTS = 0x00008CDF;
uint MAX_COLOR_TEXTURE_SAMPLES = 0x0000910E;
uint MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x00008A33;
uint MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x00008B4D;
uint MAX_COMBINED_UNIFORM_BLOCKS = 0x00008A2E;
uint MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x00008A31;
uint MAX_CUBE_MAP_TEXTURE_SIZE = 0x0000851C;
uint MAX_DEPTH_TEXTURE_SAMPLES = 0x0000910F;
uint MAX_DRAW_BUFFERS = 0x00008824;
uint MAX_ELEMENTS_INDICES = 0x000080E9;
uint MAX_ELEMENTS_VERTICES = 0x000080E8;
uint MAX_FRAGMENT_INPUT_COMPONENTS = 0x00009125;
uint MAX_FRAGMENT_UNIFORM_BLOCKS = 0x00008A2D;
uint MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x00008B49;
uint MAX_GEOMETRY_INPUT_COMPONENTS = 0x00009123;
uint MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x00009124;
uint MAX_GEOMETRY_OUTPUT_VERTICES = 0x00008DE0;
uint MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x00008C29;
uint MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x00008DE1;
uint MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x00008DDF;
uint MAX_INTEGER_SAMPLES = 0x00009110;
uint MAX_PROGRAM_TEXEL_OFFSET = 0x00008905;
uint MAX_RECTANGLE_TEXTURE_SIZE = 0x000084F8;
uint MAX_RENDERBUFFER_SIZE = 0x000084E8;
uint MAX_SAMPLE_MASK_WORDS = 0x00008E59;
uint MAX_SAMPLES = 0x00008D57;
uint MAX_SERVER_WAIT_TIMEOUT = 0x00009111;
uint MAX_TEXTURE_BUFFER_SIZE = 0x00008C2B;
uint MAX_TEXTURE_IMAGE_UNITS = 0x00008872;
uint MAX_TEXTURE_LOD_BIAS = 0x000084FD;
uint MAX_TEXTURE_SIZE = 0x00000D33;
uint MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x00008C8A;
uint MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x00008C8B;
uint MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x00008C80;
uint MAX_UNIFORM_BLOCK_SIZE = 0x00008A30;
uint MAX_UNIFORM_BUFFER_BINDINGS = 0x00008A2F;
uint MAX_VARYING_COMPONENTS = 0x00008B4B;
uint MAX_VARYING_FLOATS = 0x00008B4B;
uint MAX_VERTEX_ATTRIBS = 0x00008869;
uint MAX_VERTEX_OUTPUT_COMPONENTS = 0x00009122;
uint MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x00008B4C;
uint MAX_VERTEX_UNIFORM_BLOCKS = 0x00008A2B;
uint MAX_VERTEX_UNIFORM_COMPONENTS = 0x00008B4A;
uint MAX_VIEWPORT_DIMS = 0x00000D3A;
uint MIN = 0x00008007;
uint MIN_PROGRAM_TEXEL_OFFSET = 0x00008904;
uint MINOR_VERSION = 0x0000821C;
uint MIRRORED_REPEAT = 0x00008370;
uint MULTISAMPLE = 0x0000809D;
uint NAND = 0x0000150E;
uint NEAREST = 0x00002600;
uint NEAREST_MIPMAP_LINEAR = 0x00002702;
uint NEAREST_MIPMAP_NEAREST = 0x00002700;
uint NEVER = 0x00000200;
uint NICEST = 0x00001102;
uint NO_ERROR = 0x00000000;
uint NONE = 0x00000000;
uint NOOP = 0x00001505;
uint NOR = 0x00001508;
uint NOTEQUAL = 0x00000205;
uint NUM_COMPRESSED_TEXTURE_FORMATS = 0x000086A2;
uint NUM_EXTENSIONS = 0x0000821D;
uint OBJECT_TYPE = 0x00009112;
uint ONE = 0x00000001;
uint ONE_MINUS_CONSTANT_ALPHA = 0x00008004;
uint ONE_MINUS_CONSTANT_COLOR = 0x00008002;
uint ONE_MINUS_DST_ALPHA = 0x00000305;
uint ONE_MINUS_DST_COLOR = 0x00000307;
uint ONE_MINUS_SRC_ALPHA = 0x00000303;
uint ONE_MINUS_SRC_COLOR = 0x00000301;
uint OR = 0x00001507;
uint OR_INVERTED = 0x0000150D;
uint OR_REVERSE = 0x0000150B;
uint OUT_OF_MEMORY = 0x00000505;
uint PACK_ALIGNMENT = 0x00000D05;
uint PACK_IMAGE_HEIGHT = 0x0000806C;
uint PACK_LSB_FIRST = 0x00000D01;
uint PACK_ROW_LENGTH = 0x00000D02;
uint PACK_SKIP_IMAGES = 0x0000806B;
uint PACK_SKIP_PIXELS = 0x00000D04;
uint PACK_SKIP_ROWS = 0x00000D03;
uint PACK_SWAP_BYTES = 0x00000D00;
uint PIXEL_PACK_BUFFER = 0x000088EB;
uint PIXEL_PACK_BUFFER_BINDING = 0x000088ED;
uint PIXEL_UNPACK_BUFFER = 0x000088EC;
uint PIXEL_UNPACK_BUFFER_BINDING = 0x000088EF;
uint POINT = 0x00001B00;
uint POINT_FADE_THRESHOLD_SIZE = 0x00008128;
uint POINT_SIZE = 0x00000B11;
uint POINT_SIZE_GRANULARITY = 0x00000B13;
uint POINT_SIZE_RANGE = 0x00000B12;
uint POINT_SPRITE_COORD_ORIGIN = 0x00008CA0;
uint POINTS = 0x00000000;
uint POLYGON_MODE = 0x00000B40;
uint POLYGON_OFFSET_FACTOR = 0x00008038;
uint POLYGON_OFFSET_FILL = 0x00008037;
uint POLYGON_OFFSET_LINE = 0x00002A02;
uint POLYGON_OFFSET_POINT = 0x00002A01;
uint POLYGON_OFFSET_UNITS = 0x00002A00;
uint POLYGON_SMOOTH = 0x00000B41;
uint POLYGON_SMOOTH_HINT = 0x00000C53;
uint PRIMITIVE_RESTART = 0x00008F9D;
uint PRIMITIVE_RESTART_INDEX = 0x00008F9E;
uint PRIMITIVES_GENERATED = 0x00008C87;
uint PROGRAM_POINT_SIZE = 0x00008642;
uint PROVOKING_VERTEX = 0x00008E4F;
uint PROXY_TEXTURE_1D = 0x00008063;
uint PROXY_TEXTURE_1D_ARRAY = 0x00008C19;
uint PROXY_TEXTURE_2D = 0x00008064;
uint PROXY_TEXTURE_2D_ARRAY = 0x00008C1B;
uint PROXY_TEXTURE_2D_MULTISAMPLE = 0x00009101;
uint PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x00009103;
uint PROXY_TEXTURE_3D = 0x00008070;
uint PROXY_TEXTURE_CUBE_MAP = 0x0000851B;
uint PROXY_TEXTURE_RECTANGLE = 0x000084F7;
uint QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x00008E4C;
uint QUERY_BY_REGION_NO_WAIT = 0x00008E16;
uint QUERY_BY_REGION_WAIT = 0x00008E15;
uint QUERY_COUNTER_BITS = 0x00008864;
uint QUERY_NO_WAIT = 0x00008E14;
uint QUERY_RESULT = 0x00008866;
uint QUERY_RESULT_AVAILABLE = 0x00008867;
uint QUERY_WAIT = 0x00008E13;
uint R11F_G11F_B10F = 0x00008C3A;
uint R16 = 0x0000822A;
uint R16_SNORM = 0x00008F98;
uint R16F = 0x0000822D;
uint R16I = 0x00008233;
uint R16UI = 0x00008234;
uint R3_G3_B2 = 0x00002A10;
uint R32F = 0x0000822E;
uint R32I = 0x00008235;
uint R32UI = 0x00008236;
uint R8 = 0x00008229;
uint R8_SNORM = 0x00008F94;
uint R8I = 0x00008231;
uint R8UI = 0x00008232;
uint RASTERIZER_DISCARD = 0x00008C89;
uint READ_BUFFER = 0x00000C02;
uint READ_FRAMEBUFFER = 0x00008CA8;
uint READ_FRAMEBUFFER_BINDING = 0x00008CAA;
uint READ_ONLY = 0x000088B8;
uint READ_WRITE = 0x000088BA;
uint RED = 0x00001903;
uint RED_INTEGER = 0x00008D94;
uint RENDERBUFFER = 0x00008D41;
uint RENDERBUFFER_ALPHA_SIZE = 0x00008D53;
uint RENDERBUFFER_BINDING = 0x00008CA7;
uint RENDERBUFFER_BLUE_SIZE = 0x00008D52;
uint RENDERBUFFER_DEPTH_SIZE = 0x00008D54;
uint RENDERBUFFER_GREEN_SIZE = 0x00008D51;
uint RENDERBUFFER_HEIGHT = 0x00008D43;
uint RENDERBUFFER_INTERNAL_FORMAT = 0x00008D44;
uint RENDERBUFFER_RED_SIZE = 0x00008D50;
uint RENDERBUFFER_SAMPLES = 0x00008CAB;
uint RENDERBUFFER_STENCIL_SIZE = 0x00008D55;
uint RENDERBUFFER_WIDTH = 0x00008D42;
uint RENDERER = 0x00001F01;
uint REPEAT = 0x00002901;
uint REPLACE = 0x00001E01;
uint RG = 0x00008227;
uint RG_INTEGER = 0x00008228;
uint RG16 = 0x0000822C;
uint RG16_SNORM = 0x00008F99;
uint RG16F = 0x0000822F;
uint RG16I = 0x00008239;
uint RG16UI = 0x0000823A;
uint RG32F = 0x00008230;
uint RG32I = 0x0000823B;
uint RG32UI = 0x0000823C;
uint RG8 = 0x0000822B;
uint RG8_SNORM = 0x00008F95;
uint RG8I = 0x00008237;
uint RG8UI = 0x00008238;
uint RGB = 0x00001907;
uint RGB_INTEGER = 0x00008D98;
uint RGB10 = 0x00008052;
uint RGB10_A2 = 0x00008059;
uint RGB12 = 0x00008053;
uint RGB16 = 0x00008054;
uint RGB16_SNORM = 0x00008F9A;
uint RGB16F = 0x0000881B;
uint RGB16I = 0x00008D89;
uint RGB16UI = 0x00008D77;
uint RGB32F = 0x00008815;
uint RGB32I = 0x00008D83;
uint RGB32UI = 0x00008D71;
uint RGB4 = 0x0000804F;
uint RGB5 = 0x00008050;
uint RGB5_A1 = 0x00008057;
uint RGB8 = 0x00008051;
uint RGB8_SNORM = 0x00008F96;
uint RGB8I = 0x00008D8F;
uint RGB8UI = 0x00008D7D;
uint RGB9_E5 = 0x00008C3D;
uint RGBA = 0x00001908;
uint RGBA_INTEGER = 0x00008D99;
uint RGBA12 = 0x0000805A;
uint RGBA16 = 0x0000805B;
uint RGBA16_SNORM = 0x00008F9B;
uint RGBA16F = 0x0000881A;
uint RGBA16I = 0x00008D88;
uint RGBA16UI = 0x00008D76;
uint RGBA2 = 0x00008055;
uint RGBA32F = 0x00008814;
uint RGBA32I = 0x00008D82;
uint RGBA32UI = 0x00008D70;
uint RGBA4 = 0x00008056;
uint RGBA8 = 0x00008058;
uint RGBA8_SNORM = 0x00008F97;
uint RGBA8I = 0x00008D8E;
uint RGBA8UI = 0x00008D7C;
uint RIGHT = 0x00000407;
uint SAMPLE_ALPHA_TO_COVERAGE = 0x0000809E;
uint SAMPLE_ALPHA_TO_ONE = 0x0000809F;
uint SAMPLE_BUFFERS = 0x000080A8;
uint SAMPLE_COVERAGE = 0x000080A0;
uint SAMPLE_COVERAGE_INVERT = 0x000080AB;
uint SAMPLE_COVERAGE_VALUE = 0x000080AA;
uint SAMPLE_MASK = 0x00008E51;
uint SAMPLE_MASK_VALUE = 0x00008E52;
uint SAMPLE_POSITION = 0x00008E50;
uint SAMPLER_1D = 0x00008B5D;
uint SAMPLER_1D_ARRAY = 0x00008DC0;
uint SAMPLER_1D_ARRAY_SHADOW = 0x00008DC3;
uint SAMPLER_1D_SHADOW = 0x00008B61;
uint SAMPLER_2D = 0x00008B5E;
uint SAMPLER_2D_ARRAY = 0x00008DC1;
uint SAMPLER_2D_ARRAY_SHADOW = 0x00008DC4;
uint SAMPLER_2D_MULTISAMPLE = 0x00009108;
uint SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910B;
uint SAMPLER_2D_RECT = 0x00008B63;
uint SAMPLER_2D_RECT_SHADOW = 0x00008B64;
uint SAMPLER_2D_SHADOW = 0x00008B62;
uint SAMPLER_3D = 0x00008B5F;
uint SAMPLER_BUFFER = 0x00008DC2;
uint SAMPLER_CUBE = 0x00008B60;
uint SAMPLER_CUBE_SHADOW = 0x00008DC5;
uint SAMPLES = 0x000080A9;
uint SAMPLES_PASSED = 0x00008914;
uint SCISSOR_BOX = 0x00000C10;
uint SCISSOR_TEST = 0x00000C11;
uint SEPARATE_ATTRIBS = 0x00008C8D;
uint SET = 0x0000150F;
uint SHADER_SOURCE_LENGTH = 0x00008B88;
uint SHADER_TYPE = 0x00008B4F;
uint SHADING_LANGUAGE_VERSION = 0x00008B8C;
uint SHORT = 0x00001402;
uint SIGNALED = 0x00009119;
uint SIGNED_NORMALIZED = 0x00008F9C;
uint SMOOTH_LINE_WIDTH_GRANULARITY = 0x00000B23;
uint SMOOTH_LINE_WIDTH_RANGE = 0x00000B22;
uint SMOOTH_POINT_SIZE_GRANULARITY = 0x00000B13;
uint SMOOTH_POINT_SIZE_RANGE = 0x00000B12;
uint SRC_ALPHA = 0x00000302;
uint SRC_ALPHA_SATURATE = 0x00000308;
uint SRC_COLOR = 0x00000300;
uint SRC1_ALPHA = 0x00008589;
uint SRGB = 0x00008C40;
uint SRGB_ALPHA = 0x00008C42;
uint SRGB8 = 0x00008C41;
uint SRGB8_ALPHA8 = 0x00008C43;
uint STATIC_COPY = 0x000088E6;
uint STATIC_DRAW = 0x000088E4;
uint STATIC_READ = 0x000088E5;
uint STENCIL = 0x00001802;
uint STENCIL_ATTACHMENT = 0x00008D20;
uint STENCIL_BACK_FAIL = 0x00008801;
uint STENCIL_BACK_FUNC = 0x00008800;
uint STENCIL_BACK_PASS_DEPTH_FAIL = 0x00008802;
uint STENCIL_BACK_PASS_DEPTH_PASS = 0x00008803;
uint STENCIL_BACK_REF = 0x00008CA3;
uint STENCIL_BACK_VALUE_MASK = 0x00008CA4;
uint STENCIL_BACK_WRITEMASK = 0x00008CA5;
uint STENCIL_BUFFER_BIT = 0x00000400;
uint STENCIL_CLEAR_VALUE = 0x00000B91;
uint STENCIL_FAIL = 0x00000B94;
uint STENCIL_FUNC = 0x00000B92;
uint STENCIL_INDEX = 0x00001901;
uint STENCIL_INDEX1 = 0x00008D46;
uint STENCIL_INDEX16 = 0x00008D49;
uint STENCIL_INDEX4 = 0x00008D47;
uint STENCIL_INDEX8 = 0x00008D48;
uint STENCIL_PASS_DEPTH_FAIL = 0x00000B95;
uint STENCIL_PASS_DEPTH_PASS = 0x00000B96;
uint STENCIL_REF = 0x00000B97;
uint STENCIL_TEST = 0x00000B90;
uint STENCIL_VALUE_MASK = 0x00000B93;
uint STENCIL_WRITEMASK = 0x00000B98;
uint STEREO = 0x00000C33;
uint STREAM_COPY = 0x000088E2;
uint STREAM_DRAW = 0x000088E0;
uint STREAM_READ = 0x000088E1;
uint SUBPIXEL_BITS = 0x00000D50;
uint SYNC_CONDITION = 0x00009113;
uint SYNC_FENCE = 0x00009116;
uint SYNC_FLAGS = 0x00009115;
uint SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
uint SYNC_GPU_COMMANDS_COMPLETE = 0x00009117;
uint SYNC_STATUS = 0x00009114;
uint TEXTURE = 0x00001702;
uint TEXTURE_1D = 0x00000DE0;
uint TEXTURE_1D_ARRAY = 0x00008C18;
uint TEXTURE_2D = 0x00000DE1;
uint TEXTURE_2D_ARRAY = 0x00008C1A;
uint TEXTURE_2D_MULTISAMPLE = 0x00009100;
uint TEXTURE_2D_MULTISAMPLE_ARRAY = 0x00009102;
uint TEXTURE_3D = 0x0000806F;
uint TEXTURE_ALPHA_SIZE = 0x0000805F;
uint TEXTURE_ALPHA_TYPE = 0x00008C13;
uint TEXTURE_BASE_LEVEL = 0x0000813C;
uint TEXTURE_BINDING_1D = 0x00008068;
uint TEXTURE_BINDING_1D_ARRAY = 0x00008C1C;
uint TEXTURE_BINDING_2D = 0x00008069;
uint TEXTURE_BINDING_2D_ARRAY = 0x00008C1D;
uint TEXTURE_BINDING_2D_MULTISAMPLE = 0x00009104;
uint TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x00009105;
uint TEXTURE_BINDING_3D = 0x0000806A;
uint TEXTURE_BINDING_BUFFER = 0x00008C2C;
uint TEXTURE_BINDING_CUBE_MAP = 0x00008514;
uint TEXTURE_BINDING_RECTANGLE = 0x000084F6;
uint TEXTURE_BLUE_SIZE = 0x0000805E;
uint TEXTURE_BLUE_TYPE = 0x00008C12;
uint TEXTURE_BORDER_COLOR = 0x00001004;
uint TEXTURE_BUFFER = 0x00008C2A;
uint TEXTURE_BUFFER_DATA_STORE_BINDING = 0x00008C2D;
uint TEXTURE_COMPARE_FUNC = 0x0000884D;
uint TEXTURE_COMPARE_MODE = 0x0000884C;
uint TEXTURE_COMPRESSED = 0x000086A1;
uint TEXTURE_COMPRESSED_IMAGE_SIZE = 0x000086A0;
uint TEXTURE_COMPRESSION_HINT = 0x000084EF;
uint TEXTURE_CUBE_MAP = 0x00008513;
uint TEXTURE_CUBE_MAP_NEGATIVE_X = 0x00008516;
uint TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x00008518;
uint TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x0000851A;
uint TEXTURE_CUBE_MAP_POSITIVE_X = 0x00008515;
uint TEXTURE_CUBE_MAP_POSITIVE_Y = 0x00008517;
uint TEXTURE_CUBE_MAP_POSITIVE_Z = 0x00008519;
uint TEXTURE_CUBE_MAP_SEAMLESS = 0x0000884F;
uint TEXTURE_DEPTH = 0x00008071;
uint TEXTURE_DEPTH_SIZE = 0x0000884A;
uint TEXTURE_DEPTH_TYPE = 0x00008C16;
uint TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x00009107;
uint TEXTURE_GREEN_SIZE = 0x0000805D;
uint TEXTURE_GREEN_TYPE = 0x00008C11;
uint TEXTURE_HEIGHT = 0x00001001;
uint TEXTURE_INTERNAL_FORMAT = 0x00001003;
uint TEXTURE_LOD_BIAS = 0x00008501;
uint TEXTURE_MAG_FILTER = 0x00002800;
uint TEXTURE_MAX_LEVEL = 0x0000813D;
uint TEXTURE_MAX_LOD = 0x0000813B;
uint TEXTURE_MIN_FILTER = 0x00002801;
uint TEXTURE_MIN_LOD = 0x0000813A;
uint TEXTURE_RECTANGLE = 0x000084F5;
uint TEXTURE_RED_SIZE = 0x0000805C;
uint TEXTURE_RED_TYPE = 0x00008C10;
uint TEXTURE_SAMPLES = 0x00009106;
uint TEXTURE_SHARED_SIZE = 0x00008C3F;
uint TEXTURE_STENCIL_SIZE = 0x000088F1;
uint TEXTURE_WIDTH = 0x00001000;
uint TEXTURE_WRAP_R = 0x00008072;
uint TEXTURE_WRAP_S = 0x00002802;
uint TEXTURE_WRAP_T = 0x00002803;
uint TEXTURE0 = 0x000084C0;
uint TEXTURE1 = 0x000084C1;
uint TEXTURE10 = 0x000084CA;
uint TEXTURE11 = 0x000084CB;
uint TEXTURE12 = 0x000084CC;
uint TEXTURE13 = 0x000084CD;
uint TEXTURE14 = 0x000084CE;
uint TEXTURE15 = 0x000084CF;
uint TEXTURE16 = 0x000084D0;
uint TEXTURE17 = 0x000084D1;
uint TEXTURE18 = 0x000084D2;
uint TEXTURE19 = 0x000084D3;
uint TEXTURE2 = 0x000084C2;
uint TEXTURE20 = 0x000084D4;
uint TEXTURE21 = 0x000084D5;
uint TEXTURE22 = 0x000084D6;
uint TEXTURE23 = 0x000084D7;
uint TEXTURE24 = 0x000084D8;
uint TEXTURE25 = 0x000084D9;
uint TEXTURE26 = 0x000084DA;
uint TEXTURE27 = 0x000084DB;
uint TEXTURE28 = 0x000084DC;
uint TEXTURE29 = 0x000084DD;
uint TEXTURE3 = 0x000084C3;
uint TEXTURE30 = 0x000084DE;
uint TEXTURE31 = 0x000084DF;
uint TEXTURE4 = 0x000084C4;
uint TEXTURE5 = 0x000084C5;
uint TEXTURE6 = 0x000084C6;
uint TEXTURE7 = 0x000084C7;
uint TEXTURE8 = 0x000084C8;
uint TEXTURE9 = 0x000084C9;
uint TIMEOUT_EXPIRED = 0x0000911B;
ulong TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
uint TRANSFORM_FEEDBACK_BUFFER = 0x00008C8E;
uint TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x00008C8F;
uint TRANSFORM_FEEDBACK_BUFFER_MODE = 0x00008C7F;
uint TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x00008C85;
uint TRANSFORM_FEEDBACK_BUFFER_START = 0x00008C84;
uint TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x00008C88;
uint TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x00008C76;
uint TRANSFORM_FEEDBACK_VARYINGS = 0x00008C83;
uint TRIANGLE_FAN = 0x00000006;
uint TRIANGLE_STRIP = 0x00000005;
uint TRIANGLE_STRIP_ADJACENCY = 0x0000000D;
uint TRIANGLES = 0x00000004;
uint TRIANGLES_ADJACENCY = 0x0000000C;
uint TRUE = 0x00000001;
uint UNIFORM_ARRAY_STRIDE = 0x00008A3C;
uint UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x00008A43;
uint UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x00008A42;
uint UNIFORM_BLOCK_BINDING = 0x00008A3F;
uint UNIFORM_BLOCK_DATA_SIZE = 0x00008A40;
uint UNIFORM_BLOCK_INDEX = 0x00008A3A;
uint UNIFORM_BLOCK_NAME_LENGTH = 0x00008A41;
uint UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x00008A46;
uint UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x00008A44;
uint UNIFORM_BUFFER = 0x00008A11;
uint UNIFORM_BUFFER_BINDING = 0x00008A28;
uint UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x00008A34;
uint UNIFORM_BUFFER_SIZE = 0x00008A2A;
uint UNIFORM_BUFFER_START = 0x00008A29;
uint UNIFORM_IS_ROW_MAJOR = 0x00008A3E;
uint UNIFORM_MATRIX_STRIDE = 0x00008A3D;
uint UNIFORM_NAME_LENGTH = 0x00008A39;
uint UNIFORM_OFFSET = 0x00008A3B;
uint UNIFORM_SIZE = 0x00008A38;
uint UNIFORM_TYPE = 0x00008A37;
uint UNPACK_ALIGNMENT = 0x00000CF5;
uint UNPACK_IMAGE_HEIGHT = 0x0000806E;
uint UNPACK_LSB_FIRST = 0x00000CF1;
uint UNPACK_ROW_LENGTH = 0x00000CF2;
uint UNPACK_SKIP_IMAGES = 0x0000806D;
uint UNPACK_SKIP_PIXELS = 0x00000CF4;
uint UNPACK_SKIP_ROWS = 0x00000CF3;
uint UNPACK_SWAP_BYTES = 0x00000CF0;
uint UNSIGNALED = 0x00009118;
uint UNSIGNED_BYTE = 0x00001401;
uint UNSIGNED_BYTE_2_3_3_REV = 0x00008362;
uint UNSIGNED_BYTE_3_3_2 = 0x00008032;
uint UNSIGNED_INT = 0x00001405;
uint UNSIGNED_INT_10_10_10_2 = 0x00008036;
uint UNSIGNED_INT_10F_11F_11F_REV = 0x00008C3B;
uint UNSIGNED_INT_2_10_10_10_REV = 0x00008368;
uint UNSIGNED_INT_24_8 = 0x000084FA;
uint UNSIGNED_INT_5_9_9_9_REV = 0x00008C3E;
uint UNSIGNED_INT_8_8_8_8 = 0x00008035;
uint UNSIGNED_INT_8_8_8_8_REV = 0x00008367;
uint UNSIGNED_INT_SAMPLER_1D = 0x00008DD1;
uint UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x00008DD6;
uint UNSIGNED_INT_SAMPLER_2D = 0x00008DD2;
uint UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x00008DD7;
uint UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x0000910A;
uint UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910D;
uint UNSIGNED_INT_SAMPLER_2D_RECT = 0x00008DD5;
uint UNSIGNED_INT_SAMPLER_3D = 0x00008DD3;
uint UNSIGNED_INT_SAMPLER_BUFFER = 0x00008DD8;
uint UNSIGNED_INT_SAMPLER_CUBE = 0x00008DD4;
uint UNSIGNED_INT_VEC2 = 0x00008DC6;
uint UNSIGNED_INT_VEC3 = 0x00008DC7;
uint UNSIGNED_INT_VEC4 = 0x00008DC8;
uint UNSIGNED_NORMALIZED = 0x00008C17;
uint UNSIGNED_SHORT = 0x00001403;
uint UNSIGNED_SHORT_1_5_5_5_REV = 0x00008366;
uint UNSIGNED_SHORT_4_4_4_4 = 0x00008033;
uint UNSIGNED_SHORT_4_4_4_4_REV = 0x00008365;
uint UNSIGNED_SHORT_5_5_5_1 = 0x00008034;
uint UNSIGNED_SHORT_5_6_5 = 0x00008363;
uint UNSIGNED_SHORT_5_6_5_REV = 0x00008364;
uint UPPER_LEFT = 0x00008CA2;
uint VALIDATE_STATUS = 0x00008B83;
uint VENDOR = 0x00001F00;
uint VERSION = 0x00001F02;
uint VERTEX_ARRAY_BINDING = 0x000085B5;
uint VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x0000889F;
uint VERTEX_ATTRIB_ARRAY_ENABLED = 0x00008622;
uint VERTEX_ATTRIB_ARRAY_INTEGER = 0x000088FD;
uint VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x0000886A;
uint VERTEX_ATTRIB_ARRAY_POINTER = 0x00008645;
uint VERTEX_ATTRIB_ARRAY_SIZE = 0x00008623;
uint VERTEX_ATTRIB_ARRAY_STRIDE = 0x00008624;
uint VERTEX_ATTRIB_ARRAY_TYPE = 0x00008625;
uint VERTEX_PROGRAM_POINT_SIZE = 0x00008642;
uint VERTEX_SHADER = 0x00008B31;
uint VIEWPORT = 0x00000BA2;
uint WAIT_FAILED = 0x0000911D;
uint WRITE_ONLY = 0x000088B9;
uint XOR = 0x00001506;
uint ZERO = 0x00000000;
uint VERTEX_ATTRIB_ARRAY_DIVISOR = 0x000088FE;
uint SRC1_COLOR = 0x000088F9;
uint ONE_MINUS_SRC1_COLOR = 0x000088FA;
uint ONE_MINUS_SRC1_ALPHA = 0x000088FB;
uint MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x000088FC;
uint ANY_SAMPLES_PASSED = 0x00008C2F;
uint SAMPLER_BINDING = 0x00008919;
uint RGB10_A2UI = 0x0000906F;
uint TEXTURE_SWIZZLE_R = 0x00008E42;
uint TEXTURE_SWIZZLE_G = 0x00008E43;
uint TEXTURE_SWIZZLE_B = 0x00008E44;
uint TEXTURE_SWIZZLE_A = 0x00008E45;
uint TEXTURE_SWIZZLE_RGBA = 0x00008E46;
uint TIME_ELAPSED = 0x000088BF;
uint TIMESTAMP = 0x00008E28;