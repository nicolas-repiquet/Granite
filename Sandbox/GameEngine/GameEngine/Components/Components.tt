<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Drawing" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.IO.Compression" #>
<#@ import namespace="System.Drawing" #>
<#@ import namespace="System.Drawing.Imaging" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".gen.cs" #>

using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace GameEngine.Components
{
    public class Component
    {
		private Guid m_componentId;
		public Guid ComponentId { get{ return m_componentId; } }

		private Guid m_componentParentId;
        public Guid ComponentParentId { get { return m_componentParentId; } }

		private ComponentType m_componentType;
		public ComponentType ComponentType { get{ return m_componentType; } }

		private List<IObserver<Component>> m_observers;

		public Component(ComponentType type)
		{
			m_componentId = Guid.NewGuid();
			m_componentType = type;
			m_observers = new List<IObserver<Component>>();
		}

		public IDisposable Subscribe(IObserver<Component> observer)
        {
            if (observer != null)
            {
                m_observers.Add(observer);
                observer.OnNext(this);
            }

            return null;
        }

		public void SetParent(Guid id)
        {
            m_componentParentId = id;
        }

        public void Notify()
        {
            if (m_observers != null)
            {
                Parallel.ForEach(m_observers, x => x.OnNext(this));
            }
        }

        public string Serialize()
        {
            var str = "[ComponentId:" + ComponentId + ", ComponentType:" + ComponentType + "]";

            return str;
        }
	}

<#
	var enumTypes = new Dictionary<string, int>();
	var lines = File.ReadAllLines(Host.ResolvePath("Components.txt"));
	var lineNumber = 0;

	foreach(var line in lines)
	{
		if(!line.StartsWith("#"))
		{
			var tab = line.Split(' ');

			enumTypes.Add(tab[0], lineNumber);
#>
	public class <#= tab[0] #>Component : Component
	{
<#
			for(var i=1; i<tab.Length; i++)
			{
				var col = tab[i].Split(':');
#>
		public <#= col[0] #> <#= col[1] #> { get; set; }
<#
			}
#>

		public <#= tab[0] #>Component()
			:base(ComponentType.<#= tab[0] #>)
		{

		}

		public new string Serialize()
		{
			var str = "[ComponentId:" + ComponentId + ", ComponentType:" + ComponentType;
<#
			for(var i=1; i<tab.Length; i++)
			{
				var col = tab[i].Split(':');
#>
			str += ", <#= col[1] #>:" + <#= col[1] #>;
<#
			}
#>
			str += "]";

			return str;
		}
		
	}

<#
		}
		lineNumber++;

	}
#>

	public enum ComponentType
	{
<#
	foreach(var type in enumTypes)
	{
#>
		<#= type.Key #> = <#= type.Value #>,
<#		
	}
#>
	}
}