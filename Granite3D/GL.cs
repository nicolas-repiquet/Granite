
using System.Runtime.InteropServices;
namespace Granite3D
{
    public class GL
    {
        public const uint ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x00008B8A;
        public const uint ACTIVE_ATTRIBUTES = 0x00008B89;
        public const uint ACTIVE_TEXTURE = 0x000084E0;
        public const uint ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x00008A35;
        public const uint ACTIVE_UNIFORM_BLOCKS = 0x00008A36;
        public const uint ACTIVE_UNIFORM_MAX_LENGTH = 0x00008B87;
        public const uint ACTIVE_UNIFORMS = 0x00008B86;
        public const uint ALIASED_LINE_WIDTH_RANGE = 0x0000846E;
        public const uint ALPHA = 0x00001906;
        public const uint ALREADY_SIGNALED = 0x0000911A;
        public const uint ALWAYS = 0x00000207;
        public const uint AND = 0x00001501;
        public const uint AND_INVERTED = 0x00001504;
        public const uint AND_REVERSE = 0x00001502;
        public const uint ARRAY_BUFFER = 0x00008892;
        public const uint ARRAY_BUFFER_BINDING = 0x00008894;
        public const uint ATTACHED_SHADERS = 0x00008B85;
        public const uint BACK = 0x00000405;
        public const uint BACK_LEFT = 0x00000402;
        public const uint BACK_RIGHT = 0x00000403;
        public const uint BGR = 0x000080E0;
        public const uint BGR_INTEGER = 0x00008D9A;
        public const uint BGRA = 0x000080E1;
        public const uint BGRA_INTEGER = 0x00008D9B;
        public const uint BLEND = 0x00000BE2;
        public const uint BLEND_DST = 0x00000BE0;
        public const uint BLEND_DST_ALPHA = 0x000080CA;
        public const uint BLEND_DST_RGB = 0x000080C8;
        public const uint BLEND_EQUATION_ALPHA = 0x0000883D;
        public const uint BLEND_EQUATION_RGB = 0x00008009;
        public const uint BLEND_SRC = 0x00000BE1;
        public const uint BLEND_SRC_ALPHA = 0x000080CB;
        public const uint BLEND_SRC_RGB = 0x000080C9;
        public const uint BLUE = 0x00001905;
        public const uint BLUE_INTEGER = 0x00008D96;
        public const uint BOOL = 0x00008B56;
        public const uint BOOL_VEC2 = 0x00008B57;
        public const uint BOOL_VEC3 = 0x00008B58;
        public const uint BOOL_VEC4 = 0x00008B59;
        public const uint BUFFER_ACCESS = 0x000088BB;
        public const uint BUFFER_ACCESS_FLAGS = 0x0000911F;
        public const uint BUFFER_MAP_LENGTH = 0x00009120;
        public const uint BUFFER_MAP_OFFSET = 0x00009121;
        public const uint BUFFER_MAP_POINTER = 0x000088BD;
        public const uint BUFFER_MAPPED = 0x000088BC;
        public const uint BUFFER_SIZE = 0x00008764;
        public const uint BUFFER_USAGE = 0x00008765;
        public const uint BYTE = 0x00001400;
        public const uint CCW = 0x00000901;
        public const uint CLAMP_READ_COLOR = 0x0000891C;
        public const uint CLAMP_TO_BORDER = 0x0000812D;
        public const uint CLAMP_TO_EDGE = 0x0000812F;
        public const uint CLEAR = 0x00001500;
        public const uint CLIP_DISTANCE0 = 0x00003000;
        public const uint CLIP_DISTANCE1 = 0x00003001;
        public const uint CLIP_DISTANCE2 = 0x00003002;
        public const uint CLIP_DISTANCE3 = 0x00003003;
        public const uint CLIP_DISTANCE4 = 0x00003004;
        public const uint CLIP_DISTANCE5 = 0x00003005;
        public const uint CLIP_DISTANCE6 = 0x00003006;
        public const uint CLIP_DISTANCE7 = 0x00003007;
        public const uint COLOR = 0x00001800;
        public const uint COLOR_ATTACHMENT0 = 0x00008CE0;
        public const uint COLOR_ATTACHMENT1 = 0x00008CE1;
        public const uint COLOR_ATTACHMENT10 = 0x00008CEA;
        public const uint COLOR_ATTACHMENT11 = 0x00008CEB;
        public const uint COLOR_ATTACHMENT12 = 0x00008CEC;
        public const uint COLOR_ATTACHMENT13 = 0x00008CED;
        public const uint COLOR_ATTACHMENT14 = 0x00008CEE;
        public const uint COLOR_ATTACHMENT15 = 0x00008CEF;
        public const uint COLOR_ATTACHMENT2 = 0x00008CE2;
        public const uint COLOR_ATTACHMENT3 = 0x00008CE3;
        public const uint COLOR_ATTACHMENT4 = 0x00008CE4;
        public const uint COLOR_ATTACHMENT5 = 0x00008CE5;
        public const uint COLOR_ATTACHMENT6 = 0x00008CE6;
        public const uint COLOR_ATTACHMENT7 = 0x00008CE7;
        public const uint COLOR_ATTACHMENT8 = 0x00008CE8;
        public const uint COLOR_ATTACHMENT9 = 0x00008CE9;
        public const uint COLOR_BUFFER_BIT = 0x00004000;
        public const uint COLOR_CLEAR_VALUE = 0x00000C22;
        public const uint COLOR_LOGIC_OP = 0x00000BF2;
        public const uint COLOR_WRITEMASK = 0x00000C23;
        public const uint COMPARE_REF_TO_TEXTURE = 0x0000884E;
        public const uint COMPILE_STATUS = 0x00008B81;
        public const uint COMPRESSED_RED = 0x00008225;
        public const uint COMPRESSED_RED_RGTC1 = 0x00008DBB;
        public const uint COMPRESSED_RG = 0x00008226;
        public const uint COMPRESSED_RG_RGTC2 = 0x00008DBD;
        public const uint COMPRESSED_RGB = 0x000084ED;
        public const uint COMPRESSED_RGBA = 0x000084EE;
        public const uint COMPRESSED_SIGNED_RED_RGTC1 = 0x00008DBC;
        public const uint COMPRESSED_SIGNED_RG_RGTC2 = 0x00008DBE;
        public const uint COMPRESSED_SRGB = 0x00008C48;
        public const uint COMPRESSED_SRGB_ALPHA = 0x00008C49;
        public const uint COMPRESSED_TEXTURE_FORMATS = 0x000086A3;
        public const uint CONDITION_SATISFIED = 0x0000911C;
        public const uint CONSTANT_ALPHA = 0x00008003;
        public const uint CONSTANT_COLOR = 0x00008001;
        public const uint CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
        public const uint CONTEXT_CORE_PROFILE_BIT = 0x00000001;
        public const uint CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
        public const uint CONTEXT_FLAGS = 0x0000821E;
        public const uint CONTEXT_PROFILE_MASK = 0x00009126;
        public const uint COPY = 0x00001503;
        public const uint COPY_INVERTED = 0x0000150C;
        public const uint COPY_READ_BUFFER = 0x00008F36;
        public const uint COPY_WRITE_BUFFER = 0x00008F37;
        public const uint CULL_FACE = 0x00000B44;
        public const uint CULL_FACE_MODE = 0x00000B45;
        public const uint CURRENT_PROGRAM = 0x00008B8D;
        public const uint CURRENT_QUERY = 0x00008865;
        public const uint CURRENT_VERTEX_ATTRIB = 0x00008626;
        public const uint CW = 0x00000900;
        public const uint DECR = 0x00001E03;
        public const uint DECR_WRAP = 0x00008508;
        public const uint DELETE_STATUS = 0x00008B80;
        public const uint DEPTH = 0x00001801;
        public const uint DEPTH_ATTACHMENT = 0x00008D00;
        public const uint DEPTH_BUFFER_BIT = 0x00000100;
        public const uint DEPTH_CLAMP = 0x0000864F;
        public const uint DEPTH_CLEAR_VALUE = 0x00000B73;
        public const uint DEPTH_COMPONENT = 0x00001902;
        public const uint DEPTH_COMPONENT16 = 0x000081A5;
        public const uint DEPTH_COMPONENT24 = 0x000081A6;
        public const uint DEPTH_COMPONENT32 = 0x000081A7;
        public const uint DEPTH_COMPONENT32F = 0x00008CAC;
        public const uint DEPTH_FUNC = 0x00000B74;
        public const uint DEPTH_RANGE = 0x00000B70;
        public const uint DEPTH_STENCIL = 0x000084F9;
        public const uint DEPTH_STENCIL_ATTACHMENT = 0x0000821A;
        public const uint DEPTH_TEST = 0x00000B71;
        public const uint DEPTH_WRITEMASK = 0x00000B72;
        public const uint DEPTH24_STENCIL8 = 0x000088F0;
        public const uint DEPTH32F_STENCIL8 = 0x00008CAD;
        public const uint DITHER = 0x00000BD0;
        public const uint DONT_CARE = 0x00001100;
        public const uint DOUBLE = 0x0000140A;
        public const uint DOUBLEBUFFER = 0x00000C32;
        public const uint DRAW_BUFFER = 0x00000C01;
        public const uint DRAW_BUFFER0 = 0x00008825;
        public const uint DRAW_BUFFER1 = 0x00008826;
        public const uint DRAW_BUFFER10 = 0x0000882F;
        public const uint DRAW_BUFFER11 = 0x00008830;
        public const uint DRAW_BUFFER12 = 0x00008831;
        public const uint DRAW_BUFFER13 = 0x00008832;
        public const uint DRAW_BUFFER14 = 0x00008833;
        public const uint DRAW_BUFFER15 = 0x00008834;
        public const uint DRAW_BUFFER2 = 0x00008827;
        public const uint DRAW_BUFFER3 = 0x00008828;
        public const uint DRAW_BUFFER4 = 0x00008829;
        public const uint DRAW_BUFFER5 = 0x0000882A;
        public const uint DRAW_BUFFER6 = 0x0000882B;
        public const uint DRAW_BUFFER7 = 0x0000882C;
        public const uint DRAW_BUFFER8 = 0x0000882D;
        public const uint DRAW_BUFFER9 = 0x0000882E;
        public const uint DRAW_FRAMEBUFFER = 0x00008CA9;
        public const uint DRAW_FRAMEBUFFER_BINDING = 0x00008CA6;
        public const uint DST_ALPHA = 0x00000304;
        public const uint DST_COLOR = 0x00000306;
        public const uint DYNAMIC_COPY = 0x000088EA;
        public const uint DYNAMIC_DRAW = 0x000088E8;
        public const uint DYNAMIC_READ = 0x000088E9;
        public const uint ELEMENT_ARRAY_BUFFER = 0x00008893;
        public const uint ELEMENT_ARRAY_BUFFER_BINDING = 0x00008895;
        public const uint EQUAL = 0x00000202;
        public const uint EQUIV = 0x00001509;
        public const uint EXTENSIONS = 0x00001F03;
        public const uint FALSE = 0x00000000;
        public const uint FASTEST = 0x00001101;
        public const uint FILL = 0x00001B02;
        public const uint FIRST_VERTEX_CONVENTION = 0x00008E4D;
        public const uint FIXED_ONLY = 0x0000891D;
        public const uint FLOAT = 0x00001406;
        public const uint FLOAT_32_UNSIGNED_INT_24_8_REV = 0x00008DAD;
        public const uint FLOAT_MAT2 = 0x00008B5A;
        public const uint FLOAT_MAT2x3 = 0x00008B65;
        public const uint FLOAT_MAT2x4 = 0x00008B66;
        public const uint FLOAT_MAT3 = 0x00008B5B;
        public const uint FLOAT_MAT3x2 = 0x00008B67;
        public const uint FLOAT_MAT3x4 = 0x00008B68;
        public const uint FLOAT_MAT4 = 0x00008B5C;
        public const uint FLOAT_MAT4x2 = 0x00008B69;
        public const uint FLOAT_MAT4x3 = 0x00008B6A;
        public const uint FLOAT_VEC2 = 0x00008B50;
        public const uint FLOAT_VEC3 = 0x00008B51;
        public const uint FLOAT_VEC4 = 0x00008B52;
        public const uint FRAGMENT_SHADER = 0x00008B30;
        public const uint FRAGMENT_SHADER_DERIVATIVE_HINT = 0x00008B8B;
        public const uint FRAMEBUFFER = 0x00008D40;
        public const uint FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x00008215;
        public const uint FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x00008214;
        public const uint FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x00008210;
        public const uint FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x00008211;
        public const uint FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x00008216;
        public const uint FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x00008213;
        public const uint FRAMEBUFFER_ATTACHMENT_LAYERED = 0x00008DA7;
        public const uint FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x00008CD1;
        public const uint FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x00008CD0;
        public const uint FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x00008212;
        public const uint FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x00008217;
        public const uint FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x00008CD3;
        public const uint FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x00008CD4;
        public const uint FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x00008CD2;
        public const uint FRAMEBUFFER_BINDING = 0x00008CA6;
        public const uint FRAMEBUFFER_COMPLETE = 0x00008CD5;
        public const uint FRAMEBUFFER_DEFAULT = 0x00008218;
        public const uint FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x00008CD6;
        public const uint FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x00008CDB;
        public const uint FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x00008DA8;
        public const uint FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x00008CD7;
        public const uint FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x00008D56;
        public const uint FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x00008CDC;
        public const uint FRAMEBUFFER_SRGB = 0x00008DB9;
        public const uint FRAMEBUFFER_UNDEFINED = 0x00008219;
        public const uint FRAMEBUFFER_UNSUPPORTED = 0x00008CDD;
        public const uint FRONT = 0x00000404;
        public const uint FRONT_AND_BACK = 0x00000408;
        public const uint FRONT_FACE = 0x00000B46;
        public const uint FRONT_LEFT = 0x00000400;
        public const uint FRONT_RIGHT = 0x00000401;
        public const uint FUNC_ADD = 0x00008006;
        public const uint FUNC_REVERSE_SUBTRACT = 0x0000800B;
        public const uint FUNC_SUBTRACT = 0x0000800A;
        public const uint GEOMETRY_INPUT_TYPE = 0x00008917;
        public const uint GEOMETRY_OUTPUT_TYPE = 0x00008918;
        public const uint GEOMETRY_SHADER = 0x00008DD9;
        public const uint GEOMETRY_VERTICES_OUT = 0x00008916;
        public const uint GEQUAL = 0x00000206;
        public const uint GREATER = 0x00000204;
        public const uint GREEN = 0x00001904;
        public const uint GREEN_INTEGER = 0x00008D95;
        public const uint HALF_FLOAT = 0x0000140B;
        public const uint INCR = 0x00001E02;
        public const uint INCR_WRAP = 0x00008507;
        public const uint INDEX = 0x00008222;
        public const uint INFO_LOG_LENGTH = 0x00008B84;
        public const uint INT = 0x00001404;
        public const uint INT_SAMPLER_1D = 0x00008DC9;
        public const uint INT_SAMPLER_1D_ARRAY = 0x00008DCE;
        public const uint INT_SAMPLER_2D = 0x00008DCA;
        public const uint INT_SAMPLER_2D_ARRAY = 0x00008DCF;
        public const uint INT_SAMPLER_2D_MULTISAMPLE = 0x00009109;
        public const uint INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910C;
        public const uint INT_SAMPLER_2D_RECT = 0x00008DCD;
        public const uint INT_SAMPLER_3D = 0x00008DCB;
        public const uint INT_SAMPLER_BUFFER = 0x00008DD0;
        public const uint INT_SAMPLER_CUBE = 0x00008DCC;
        public const uint INT_VEC2 = 0x00008B53;
        public const uint INT_VEC3 = 0x00008B54;
        public const uint INT_VEC4 = 0x00008B55;
        public const uint INTERLEAVED_ATTRIBS = 0x00008C8C;
        public const uint INVALID_ENUM = 0x00000500;
        public const uint INVALID_FRAMEBUFFER_OPERATION = 0x00000506;
        public const uint INVALID_INDEX = 0xFFFFFFFF;
        public const uint INVALID_OPERATION = 0x00000502;
        public const uint INVALID_VALUE = 0x00000501;
        public const uint INVERT = 0x0000150A;
        public const uint KEEP = 0x00001E00;
        public const uint LAST_VERTEX_CONVENTION = 0x00008E4E;
        public const uint LEFT = 0x00000406;
        public const uint LEQUAL = 0x00000203;
        public const uint LESS = 0x00000201;
        public const uint LINE = 0x00001B01;
        public const uint LINE_LOOP = 0x00000002;
        public const uint LINE_SMOOTH = 0x00000B20;
        public const uint LINE_SMOOTH_HINT = 0x00000C52;
        public const uint LINE_STRIP = 0x00000003;
        public const uint LINE_STRIP_ADJACENCY = 0x0000000B;
        public const uint LINE_WIDTH = 0x00000B21;
        public const uint LINE_WIDTH_GRANULARITY = 0x00000B23;
        public const uint LINE_WIDTH_RANGE = 0x00000B22;
        public const uint LINEAR = 0x00002601;
        public const uint LINEAR_MIPMAP_LINEAR = 0x00002703;
        public const uint LINEAR_MIPMAP_NEAREST = 0x00002701;
        public const uint LINES = 0x00000001;
        public const uint LINES_ADJACENCY = 0x0000000A;
        public const uint LINK_STATUS = 0x00008B82;
        public const uint LOGIC_OP_MODE = 0x00000BF0;
        public const uint LOWER_LEFT = 0x00008CA1;
        public const uint MAJOR_VERSION = 0x0000821B;
        public const uint MAP_FLUSH_EXPLICIT_BIT = 0x00000010;
        public const uint MAP_INVALIDATE_BUFFER_BIT = 0x00000008;
        public const uint MAP_INVALIDATE_RANGE_BIT = 0x00000004;
        public const uint MAP_READ_BIT = 0x00000001;
        public const uint MAP_UNSYNCHRONIZED_BIT = 0x00000020;
        public const uint MAP_WRITE_BIT = 0x00000002;
        public const uint MAX = 0x00008008;
        public const uint MAX_3D_TEXTURE_SIZE = 0x00008073;
        public const uint MAX_ARRAY_TEXTURE_LAYERS = 0x000088FF;
        public const uint MAX_CLIP_DISTANCES = 0x00000D32;
        public const uint MAX_COLOR_ATTACHMENTS = 0x00008CDF;
        public const uint MAX_COLOR_TEXTURE_SAMPLES = 0x0000910E;
        public const uint MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x00008A33;
        public const uint MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x00008B4D;
        public const uint MAX_COMBINED_UNIFORM_BLOCKS = 0x00008A2E;
        public const uint MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x00008A31;
        public const uint MAX_CUBE_MAP_TEXTURE_SIZE = 0x0000851C;
        public const uint MAX_DEPTH_TEXTURE_SAMPLES = 0x0000910F;
        public const uint MAX_DRAW_BUFFERS = 0x00008824;
        public const uint MAX_ELEMENTS_INDICES = 0x000080E9;
        public const uint MAX_ELEMENTS_VERTICES = 0x000080E8;
        public const uint MAX_FRAGMENT_INPUT_COMPONENTS = 0x00009125;
        public const uint MAX_FRAGMENT_UNIFORM_BLOCKS = 0x00008A2D;
        public const uint MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x00008B49;
        public const uint MAX_GEOMETRY_INPUT_COMPONENTS = 0x00009123;
        public const uint MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x00009124;
        public const uint MAX_GEOMETRY_OUTPUT_VERTICES = 0x00008DE0;
        public const uint MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x00008C29;
        public const uint MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x00008DE1;
        public const uint MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x00008DDF;
        public const uint MAX_INTEGER_SAMPLES = 0x00009110;
        public const uint MAX_PROGRAM_TEXEL_OFFSET = 0x00008905;
        public const uint MAX_RECTANGLE_TEXTURE_SIZE = 0x000084F8;
        public const uint MAX_RENDERBUFFER_SIZE = 0x000084E8;
        public const uint MAX_SAMPLE_MASK_WORDS = 0x00008E59;
        public const uint MAX_SAMPLES = 0x00008D57;
        public const uint MAX_SERVER_WAIT_TIMEOUT = 0x00009111;
        public const uint MAX_TEXTURE_BUFFER_SIZE = 0x00008C2B;
        public const uint MAX_TEXTURE_IMAGE_UNITS = 0x00008872;
        public const uint MAX_TEXTURE_LOD_BIAS = 0x000084FD;
        public const uint MAX_TEXTURE_SIZE = 0x00000D33;
        public const uint MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x00008C8A;
        public const uint MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x00008C8B;
        public const uint MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x00008C80;
        public const uint MAX_UNIFORM_BLOCK_SIZE = 0x00008A30;
        public const uint MAX_UNIFORM_BUFFER_BINDINGS = 0x00008A2F;
        public const uint MAX_VARYING_COMPONENTS = 0x00008B4B;
        public const uint MAX_VARYING_FLOATS = 0x00008B4B;
        public const uint MAX_VERTEX_ATTRIBS = 0x00008869;
        public const uint MAX_VERTEX_OUTPUT_COMPONENTS = 0x00009122;
        public const uint MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x00008B4C;
        public const uint MAX_VERTEX_UNIFORM_BLOCKS = 0x00008A2B;
        public const uint MAX_VERTEX_UNIFORM_COMPONENTS = 0x00008B4A;
        public const uint MAX_VIEWPORT_DIMS = 0x00000D3A;
        public const uint MIN = 0x00008007;
        public const uint MIN_PROGRAM_TEXEL_OFFSET = 0x00008904;
        public const uint MINOR_VERSION = 0x0000821C;
        public const uint MIRRORED_REPEAT = 0x00008370;
        public const uint MULTISAMPLE = 0x0000809D;
        public const uint NAND = 0x0000150E;
        public const uint NEAREST = 0x00002600;
        public const uint NEAREST_MIPMAP_LINEAR = 0x00002702;
        public const uint NEAREST_MIPMAP_NEAREST = 0x00002700;
        public const uint NEVER = 0x00000200;
        public const uint NICEST = 0x00001102;
        public const uint NO_ERROR = 0x00000000;
        public const uint NONE = 0x00000000;
        public const uint NOOP = 0x00001505;
        public const uint NOR = 0x00001508;
        public const uint NOTEQUAL = 0x00000205;
        public const uint NUM_COMPRESSED_TEXTURE_FORMATS = 0x000086A2;
        public const uint NUM_EXTENSIONS = 0x0000821D;
        public const uint OBJECT_TYPE = 0x00009112;
        public const uint ONE = 0x00000001;
        public const uint ONE_MINUS_CONSTANT_ALPHA = 0x00008004;
        public const uint ONE_MINUS_CONSTANT_COLOR = 0x00008002;
        public const uint ONE_MINUS_DST_ALPHA = 0x00000305;
        public const uint ONE_MINUS_DST_COLOR = 0x00000307;
        public const uint ONE_MINUS_SRC_ALPHA = 0x00000303;
        public const uint ONE_MINUS_SRC_COLOR = 0x00000301;
        public const uint OR = 0x00001507;
        public const uint OR_INVERTED = 0x0000150D;
        public const uint OR_REVERSE = 0x0000150B;
        public const uint OUT_OF_MEMORY = 0x00000505;
        public const uint PACK_ALIGNMENT = 0x00000D05;
        public const uint PACK_IMAGE_HEIGHT = 0x0000806C;
        public const uint PACK_LSB_FIRST = 0x00000D01;
        public const uint PACK_ROW_LENGTH = 0x00000D02;
        public const uint PACK_SKIP_IMAGES = 0x0000806B;
        public const uint PACK_SKIP_PIXELS = 0x00000D04;
        public const uint PACK_SKIP_ROWS = 0x00000D03;
        public const uint PACK_SWAP_BYTES = 0x00000D00;
        public const uint PIXEL_PACK_BUFFER = 0x000088EB;
        public const uint PIXEL_PACK_BUFFER_BINDING = 0x000088ED;
        public const uint PIXEL_UNPACK_BUFFER = 0x000088EC;
        public const uint PIXEL_UNPACK_BUFFER_BINDING = 0x000088EF;
        public const uint POINT = 0x00001B00;
        public const uint POINT_FADE_THRESHOLD_SIZE = 0x00008128;
        public const uint POINT_SIZE = 0x00000B11;
        public const uint POINT_SIZE_GRANULARITY = 0x00000B13;
        public const uint POINT_SIZE_RANGE = 0x00000B12;
        public const uint POINT_SPRITE_COORD_ORIGIN = 0x00008CA0;
        public const uint POINTS = 0x00000000;
        public const uint POLYGON_MODE = 0x00000B40;
        public const uint POLYGON_OFFSET_FACTOR = 0x00008038;
        public const uint POLYGON_OFFSET_FILL = 0x00008037;
        public const uint POLYGON_OFFSET_LINE = 0x00002A02;
        public const uint POLYGON_OFFSET_POINT = 0x00002A01;
        public const uint POLYGON_OFFSET_UNITS = 0x00002A00;
        public const uint POLYGON_SMOOTH = 0x00000B41;
        public const uint POLYGON_SMOOTH_HINT = 0x00000C53;
        public const uint PRIMITIVE_RESTART = 0x00008F9D;
        public const uint PRIMITIVE_RESTART_INDEX = 0x00008F9E;
        public const uint PRIMITIVES_GENERATED = 0x00008C87;
        public const uint PROGRAM_POINT_SIZE = 0x00008642;
        public const uint PROVOKING_VERTEX = 0x00008E4F;
        public const uint PROXY_TEXTURE_1D = 0x00008063;
        public const uint PROXY_TEXTURE_1D_ARRAY = 0x00008C19;
        public const uint PROXY_TEXTURE_2D = 0x00008064;
        public const uint PROXY_TEXTURE_2D_ARRAY = 0x00008C1B;
        public const uint PROXY_TEXTURE_2D_MULTISAMPLE = 0x00009101;
        public const uint PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x00009103;
        public const uint PROXY_TEXTURE_3D = 0x00008070;
        public const uint PROXY_TEXTURE_CUBE_MAP = 0x0000851B;
        public const uint PROXY_TEXTURE_RECTANGLE = 0x000084F7;
        public const uint QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x00008E4C;
        public const uint QUERY_BY_REGION_NO_WAIT = 0x00008E16;
        public const uint QUERY_BY_REGION_WAIT = 0x00008E15;
        public const uint QUERY_COUNTER_BITS = 0x00008864;
        public const uint QUERY_NO_WAIT = 0x00008E14;
        public const uint QUERY_RESULT = 0x00008866;
        public const uint QUERY_RESULT_AVAILABLE = 0x00008867;
        public const uint QUERY_WAIT = 0x00008E13;
        public const uint R11F_G11F_B10F = 0x00008C3A;
        public const uint R16 = 0x0000822A;
        public const uint R16_SNORM = 0x00008F98;
        public const uint R16F = 0x0000822D;
        public const uint R16I = 0x00008233;
        public const uint R16UI = 0x00008234;
        public const uint R3_G3_B2 = 0x00002A10;
        public const uint R32F = 0x0000822E;
        public const uint R32I = 0x00008235;
        public const uint R32UI = 0x00008236;
        public const uint R8 = 0x00008229;
        public const uint R8_SNORM = 0x00008F94;
        public const uint R8I = 0x00008231;
        public const uint R8UI = 0x00008232;
        public const uint RASTERIZER_DISCARD = 0x00008C89;
        public const uint READ_BUFFER = 0x00000C02;
        public const uint READ_FRAMEBUFFER = 0x00008CA8;
        public const uint READ_FRAMEBUFFER_BINDING = 0x00008CAA;
        public const uint READ_ONLY = 0x000088B8;
        public const uint READ_WRITE = 0x000088BA;
        public const uint RED = 0x00001903;
        public const uint RED_INTEGER = 0x00008D94;
        public const uint RENDERBUFFER = 0x00008D41;
        public const uint RENDERBUFFER_ALPHA_SIZE = 0x00008D53;
        public const uint RENDERBUFFER_BINDING = 0x00008CA7;
        public const uint RENDERBUFFER_BLUE_SIZE = 0x00008D52;
        public const uint RENDERBUFFER_DEPTH_SIZE = 0x00008D54;
        public const uint RENDERBUFFER_GREEN_SIZE = 0x00008D51;
        public const uint RENDERBUFFER_HEIGHT = 0x00008D43;
        public const uint RENDERBUFFER_INTERNAL_FORMAT = 0x00008D44;
        public const uint RENDERBUFFER_RED_SIZE = 0x00008D50;
        public const uint RENDERBUFFER_SAMPLES = 0x00008CAB;
        public const uint RENDERBUFFER_STENCIL_SIZE = 0x00008D55;
        public const uint RENDERBUFFER_WIDTH = 0x00008D42;
        public const uint RENDERER = 0x00001F01;
        public const uint REPEAT = 0x00002901;
        public const uint REPLACE = 0x00001E01;
        public const uint RG = 0x00008227;
        public const uint RG_INTEGER = 0x00008228;
        public const uint RG16 = 0x0000822C;
        public const uint RG16_SNORM = 0x00008F99;
        public const uint RG16F = 0x0000822F;
        public const uint RG16I = 0x00008239;
        public const uint RG16UI = 0x0000823A;
        public const uint RG32F = 0x00008230;
        public const uint RG32I = 0x0000823B;
        public const uint RG32UI = 0x0000823C;
        public const uint RG8 = 0x0000822B;
        public const uint RG8_SNORM = 0x00008F95;
        public const uint RG8I = 0x00008237;
        public const uint RG8UI = 0x00008238;
        public const uint RGB = 0x00001907;
        public const uint RGB_INTEGER = 0x00008D98;
        public const uint RGB10 = 0x00008052;
        public const uint RGB10_A2 = 0x00008059;
        public const uint RGB12 = 0x00008053;
        public const uint RGB16 = 0x00008054;
        public const uint RGB16_SNORM = 0x00008F9A;
        public const uint RGB16F = 0x0000881B;
        public const uint RGB16I = 0x00008D89;
        public const uint RGB16UI = 0x00008D77;
        public const uint RGB32F = 0x00008815;
        public const uint RGB32I = 0x00008D83;
        public const uint RGB32UI = 0x00008D71;
        public const uint RGB4 = 0x0000804F;
        public const uint RGB5 = 0x00008050;
        public const uint RGB5_A1 = 0x00008057;
        public const uint RGB8 = 0x00008051;
        public const uint RGB8_SNORM = 0x00008F96;
        public const uint RGB8I = 0x00008D8F;
        public const uint RGB8UI = 0x00008D7D;
        public const uint RGB9_E5 = 0x00008C3D;
        public const uint RGBA = 0x00001908;
        public const uint RGBA_INTEGER = 0x00008D99;
        public const uint RGBA12 = 0x0000805A;
        public const uint RGBA16 = 0x0000805B;
        public const uint RGBA16_SNORM = 0x00008F9B;
        public const uint RGBA16F = 0x0000881A;
        public const uint RGBA16I = 0x00008D88;
        public const uint RGBA16UI = 0x00008D76;
        public const uint RGBA2 = 0x00008055;
        public const uint RGBA32F = 0x00008814;
        public const uint RGBA32I = 0x00008D82;
        public const uint RGBA32UI = 0x00008D70;
        public const uint RGBA4 = 0x00008056;
        public const uint RGBA8 = 0x00008058;
        public const uint RGBA8_SNORM = 0x00008F97;
        public const uint RGBA8I = 0x00008D8E;
        public const uint RGBA8UI = 0x00008D7C;
        public const uint RIGHT = 0x00000407;
        public const uint SAMPLE_ALPHA_TO_COVERAGE = 0x0000809E;
        public const uint SAMPLE_ALPHA_TO_ONE = 0x0000809F;
        public const uint SAMPLE_BUFFERS = 0x000080A8;
        public const uint SAMPLE_COVERAGE = 0x000080A0;
        public const uint SAMPLE_COVERAGE_INVERT = 0x000080AB;
        public const uint SAMPLE_COVERAGE_VALUE = 0x000080AA;
        public const uint SAMPLE_MASK = 0x00008E51;
        public const uint SAMPLE_MASK_VALUE = 0x00008E52;
        public const uint SAMPLE_POSITION = 0x00008E50;
        public const uint SAMPLER_1D = 0x00008B5D;
        public const uint SAMPLER_1D_ARRAY = 0x00008DC0;
        public const uint SAMPLER_1D_ARRAY_SHADOW = 0x00008DC3;
        public const uint SAMPLER_1D_SHADOW = 0x00008B61;
        public const uint SAMPLER_2D = 0x00008B5E;
        public const uint SAMPLER_2D_ARRAY = 0x00008DC1;
        public const uint SAMPLER_2D_ARRAY_SHADOW = 0x00008DC4;
        public const uint SAMPLER_2D_MULTISAMPLE = 0x00009108;
        public const uint SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910B;
        public const uint SAMPLER_2D_RECT = 0x00008B63;
        public const uint SAMPLER_2D_RECT_SHADOW = 0x00008B64;
        public const uint SAMPLER_2D_SHADOW = 0x00008B62;
        public const uint SAMPLER_3D = 0x00008B5F;
        public const uint SAMPLER_BUFFER = 0x00008DC2;
        public const uint SAMPLER_CUBE = 0x00008B60;
        public const uint SAMPLER_CUBE_SHADOW = 0x00008DC5;
        public const uint SAMPLES = 0x000080A9;
        public const uint SAMPLES_PASSED = 0x00008914;
        public const uint SCISSOR_BOX = 0x00000C10;
        public const uint SCISSOR_TEST = 0x00000C11;
        public const uint SEPARATE_ATTRIBS = 0x00008C8D;
        public const uint SET = 0x0000150F;
        public const uint SHADER_SOURCE_LENGTH = 0x00008B88;
        public const uint SHADER_TYPE = 0x00008B4F;
        public const uint SHADING_LANGUAGE_VERSION = 0x00008B8C;
        public const uint SHORT = 0x00001402;
        public const uint SIGNALED = 0x00009119;
        public const uint SIGNED_NORMALIZED = 0x00008F9C;
        public const uint SMOOTH_LINE_WIDTH_GRANULARITY = 0x00000B23;
        public const uint SMOOTH_LINE_WIDTH_RANGE = 0x00000B22;
        public const uint SMOOTH_POINT_SIZE_GRANULARITY = 0x00000B13;
        public const uint SMOOTH_POINT_SIZE_RANGE = 0x00000B12;
        public const uint SRC_ALPHA = 0x00000302;
        public const uint SRC_ALPHA_SATURATE = 0x00000308;
        public const uint SRC_COLOR = 0x00000300;
        public const uint SRC1_ALPHA = 0x00008589;
        public const uint SRGB = 0x00008C40;
        public const uint SRGB_ALPHA = 0x00008C42;
        public const uint SRGB8 = 0x00008C41;
        public const uint SRGB8_ALPHA8 = 0x00008C43;
        public const uint STATIC_COPY = 0x000088E6;
        public const uint STATIC_DRAW = 0x000088E4;
        public const uint STATIC_READ = 0x000088E5;
        public const uint STENCIL = 0x00001802;
        public const uint STENCIL_ATTACHMENT = 0x00008D20;
        public const uint STENCIL_BACK_FAIL = 0x00008801;
        public const uint STENCIL_BACK_FUNC = 0x00008800;
        public const uint STENCIL_BACK_PASS_DEPTH_FAIL = 0x00008802;
        public const uint STENCIL_BACK_PASS_DEPTH_PASS = 0x00008803;
        public const uint STENCIL_BACK_REF = 0x00008CA3;
        public const uint STENCIL_BACK_VALUE_MASK = 0x00008CA4;
        public const uint STENCIL_BACK_WRITEMASK = 0x00008CA5;
        public const uint STENCIL_BUFFER_BIT = 0x00000400;
        public const uint STENCIL_CLEAR_VALUE = 0x00000B91;
        public const uint STENCIL_FAIL = 0x00000B94;
        public const uint STENCIL_FUNC = 0x00000B92;
        public const uint STENCIL_INDEX = 0x00001901;
        public const uint STENCIL_INDEX1 = 0x00008D46;
        public const uint STENCIL_INDEX16 = 0x00008D49;
        public const uint STENCIL_INDEX4 = 0x00008D47;
        public const uint STENCIL_INDEX8 = 0x00008D48;
        public const uint STENCIL_PASS_DEPTH_FAIL = 0x00000B95;
        public const uint STENCIL_PASS_DEPTH_PASS = 0x00000B96;
        public const uint STENCIL_REF = 0x00000B97;
        public const uint STENCIL_TEST = 0x00000B90;
        public const uint STENCIL_VALUE_MASK = 0x00000B93;
        public const uint STENCIL_WRITEMASK = 0x00000B98;
        public const uint STEREO = 0x00000C33;
        public const uint STREAM_COPY = 0x000088E2;
        public const uint STREAM_DRAW = 0x000088E0;
        public const uint STREAM_READ = 0x000088E1;
        public const uint SUBPIXEL_BITS = 0x00000D50;
        public const uint SYNC_CONDITION = 0x00009113;
        public const uint SYNC_FENCE = 0x00009116;
        public const uint SYNC_FLAGS = 0x00009115;
        public const uint SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
        public const uint SYNC_GPU_COMMANDS_COMPLETE = 0x00009117;
        public const uint SYNC_STATUS = 0x00009114;
        public const uint TEXTURE = 0x00001702;
        public const uint TEXTURE_1D = 0x00000DE0;
        public const uint TEXTURE_1D_ARRAY = 0x00008C18;
        public const uint TEXTURE_2D = 0x00000DE1;
        public const uint TEXTURE_2D_ARRAY = 0x00008C1A;
        public const uint TEXTURE_2D_MULTISAMPLE = 0x00009100;
        public const uint TEXTURE_2D_MULTISAMPLE_ARRAY = 0x00009102;
        public const uint TEXTURE_3D = 0x0000806F;
        public const uint TEXTURE_ALPHA_SIZE = 0x0000805F;
        public const uint TEXTURE_ALPHA_TYPE = 0x00008C13;
        public const uint TEXTURE_BASE_LEVEL = 0x0000813C;
        public const uint TEXTURE_BINDING_1D = 0x00008068;
        public const uint TEXTURE_BINDING_1D_ARRAY = 0x00008C1C;
        public const uint TEXTURE_BINDING_2D = 0x00008069;
        public const uint TEXTURE_BINDING_2D_ARRAY = 0x00008C1D;
        public const uint TEXTURE_BINDING_2D_MULTISAMPLE = 0x00009104;
        public const uint TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x00009105;
        public const uint TEXTURE_BINDING_3D = 0x0000806A;
        public const uint TEXTURE_BINDING_BUFFER = 0x00008C2C;
        public const uint TEXTURE_BINDING_CUBE_MAP = 0x00008514;
        public const uint TEXTURE_BINDING_RECTANGLE = 0x000084F6;
        public const uint TEXTURE_BLUE_SIZE = 0x0000805E;
        public const uint TEXTURE_BLUE_TYPE = 0x00008C12;
        public const uint TEXTURE_BORDER_COLOR = 0x00001004;
        public const uint TEXTURE_BUFFER = 0x00008C2A;
        public const uint TEXTURE_BUFFER_DATA_STORE_BINDING = 0x00008C2D;
        public const uint TEXTURE_COMPARE_FUNC = 0x0000884D;
        public const uint TEXTURE_COMPARE_MODE = 0x0000884C;
        public const uint TEXTURE_COMPRESSED = 0x000086A1;
        public const uint TEXTURE_COMPRESSED_IMAGE_SIZE = 0x000086A0;
        public const uint TEXTURE_COMPRESSION_HINT = 0x000084EF;
        public const uint TEXTURE_CUBE_MAP = 0x00008513;
        public const uint TEXTURE_CUBE_MAP_NEGATIVE_X = 0x00008516;
        public const uint TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x00008518;
        public const uint TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x0000851A;
        public const uint TEXTURE_CUBE_MAP_POSITIVE_X = 0x00008515;
        public const uint TEXTURE_CUBE_MAP_POSITIVE_Y = 0x00008517;
        public const uint TEXTURE_CUBE_MAP_POSITIVE_Z = 0x00008519;
        public const uint TEXTURE_CUBE_MAP_SEAMLESS = 0x0000884F;
        public const uint TEXTURE_DEPTH = 0x00008071;
        public const uint TEXTURE_DEPTH_SIZE = 0x0000884A;
        public const uint TEXTURE_DEPTH_TYPE = 0x00008C16;
        public const uint TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x00009107;
        public const uint TEXTURE_GREEN_SIZE = 0x0000805D;
        public const uint TEXTURE_GREEN_TYPE = 0x00008C11;
        public const uint TEXTURE_HEIGHT = 0x00001001;
        public const uint TEXTURE_INTERNAL_FORMAT = 0x00001003;
        public const uint TEXTURE_LOD_BIAS = 0x00008501;
        public const uint TEXTURE_MAG_FILTER = 0x00002800;
        public const uint TEXTURE_MAX_LEVEL = 0x0000813D;
        public const uint TEXTURE_MAX_LOD = 0x0000813B;
        public const uint TEXTURE_MIN_FILTER = 0x00002801;
        public const uint TEXTURE_MIN_LOD = 0x0000813A;
        public const uint TEXTURE_RECTANGLE = 0x000084F5;
        public const uint TEXTURE_RED_SIZE = 0x0000805C;
        public const uint TEXTURE_RED_TYPE = 0x00008C10;
        public const uint TEXTURE_SAMPLES = 0x00009106;
        public const uint TEXTURE_SHARED_SIZE = 0x00008C3F;
        public const uint TEXTURE_STENCIL_SIZE = 0x000088F1;
        public const uint TEXTURE_WIDTH = 0x00001000;
        public const uint TEXTURE_WRAP_R = 0x00008072;
        public const uint TEXTURE_WRAP_S = 0x00002802;
        public const uint TEXTURE_WRAP_T = 0x00002803;
        public const uint TEXTURE0 = 0x000084C0;
        public const uint TEXTURE1 = 0x000084C1;
        public const uint TEXTURE10 = 0x000084CA;
        public const uint TEXTURE11 = 0x000084CB;
        public const uint TEXTURE12 = 0x000084CC;
        public const uint TEXTURE13 = 0x000084CD;
        public const uint TEXTURE14 = 0x000084CE;
        public const uint TEXTURE15 = 0x000084CF;
        public const uint TEXTURE16 = 0x000084D0;
        public const uint TEXTURE17 = 0x000084D1;
        public const uint TEXTURE18 = 0x000084D2;
        public const uint TEXTURE19 = 0x000084D3;
        public const uint TEXTURE2 = 0x000084C2;
        public const uint TEXTURE20 = 0x000084D4;
        public const uint TEXTURE21 = 0x000084D5;
        public const uint TEXTURE22 = 0x000084D6;
        public const uint TEXTURE23 = 0x000084D7;
        public const uint TEXTURE24 = 0x000084D8;
        public const uint TEXTURE25 = 0x000084D9;
        public const uint TEXTURE26 = 0x000084DA;
        public const uint TEXTURE27 = 0x000084DB;
        public const uint TEXTURE28 = 0x000084DC;
        public const uint TEXTURE29 = 0x000084DD;
        public const uint TEXTURE3 = 0x000084C3;
        public const uint TEXTURE30 = 0x000084DE;
        public const uint TEXTURE31 = 0x000084DF;
        public const uint TEXTURE4 = 0x000084C4;
        public const uint TEXTURE5 = 0x000084C5;
        public const uint TEXTURE6 = 0x000084C6;
        public const uint TEXTURE7 = 0x000084C7;
        public const uint TEXTURE8 = 0x000084C8;
        public const uint TEXTURE9 = 0x000084C9;
        public const uint TIMEOUT_EXPIRED = 0x0000911B;
        public const ulong TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
        public const uint TRANSFORM_FEEDBACK_BUFFER = 0x00008C8E;
        public const uint TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x00008C8F;
        public const uint TRANSFORM_FEEDBACK_BUFFER_MODE = 0x00008C7F;
        public const uint TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x00008C85;
        public const uint TRANSFORM_FEEDBACK_BUFFER_START = 0x00008C84;
        public const uint TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x00008C88;
        public const uint TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x00008C76;
        public const uint TRANSFORM_FEEDBACK_VARYINGS = 0x00008C83;
        public const uint TRIANGLE_FAN = 0x00000006;
        public const uint TRIANGLE_STRIP = 0x00000005;
        public const uint TRIANGLE_STRIP_ADJACENCY = 0x0000000D;
        public const uint TRIANGLES = 0x00000004;
        public const uint TRIANGLES_ADJACENCY = 0x0000000C;
        public const uint TRUE = 0x00000001;
        public const uint UNIFORM_ARRAY_STRIDE = 0x00008A3C;
        public const uint UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x00008A43;
        public const uint UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x00008A42;
        public const uint UNIFORM_BLOCK_BINDING = 0x00008A3F;
        public const uint UNIFORM_BLOCK_DATA_SIZE = 0x00008A40;
        public const uint UNIFORM_BLOCK_INDEX = 0x00008A3A;
        public const uint UNIFORM_BLOCK_NAME_LENGTH = 0x00008A41;
        public const uint UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x00008A46;
        public const uint UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x00008A44;
        public const uint UNIFORM_BUFFER = 0x00008A11;
        public const uint UNIFORM_BUFFER_BINDING = 0x00008A28;
        public const uint UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x00008A34;
        public const uint UNIFORM_BUFFER_SIZE = 0x00008A2A;
        public const uint UNIFORM_BUFFER_START = 0x00008A29;
        public const uint UNIFORM_IS_ROW_MAJOR = 0x00008A3E;
        public const uint UNIFORM_MATRIX_STRIDE = 0x00008A3D;
        public const uint UNIFORM_NAME_LENGTH = 0x00008A39;
        public const uint UNIFORM_OFFSET = 0x00008A3B;
        public const uint UNIFORM_SIZE = 0x00008A38;
        public const uint UNIFORM_TYPE = 0x00008A37;
        public const uint UNPACK_ALIGNMENT = 0x00000CF5;
        public const uint UNPACK_IMAGE_HEIGHT = 0x0000806E;
        public const uint UNPACK_LSB_FIRST = 0x00000CF1;
        public const uint UNPACK_ROW_LENGTH = 0x00000CF2;
        public const uint UNPACK_SKIP_IMAGES = 0x0000806D;
        public const uint UNPACK_SKIP_PIXELS = 0x00000CF4;
        public const uint UNPACK_SKIP_ROWS = 0x00000CF3;
        public const uint UNPACK_SWAP_BYTES = 0x00000CF0;
        public const uint UNSIGNALED = 0x00009118;
        public const uint UNSIGNED_BYTE = 0x00001401;
        public const uint UNSIGNED_BYTE_2_3_3_REV = 0x00008362;
        public const uint UNSIGNED_BYTE_3_3_2 = 0x00008032;
        public const uint UNSIGNED_INT = 0x00001405;
        public const uint UNSIGNED_INT_10_10_10_2 = 0x00008036;
        public const uint UNSIGNED_INT_10F_11F_11F_REV = 0x00008C3B;
        public const uint UNSIGNED_INT_2_10_10_10_REV = 0x00008368;
        public const uint UNSIGNED_INT_24_8 = 0x000084FA;
        public const uint UNSIGNED_INT_5_9_9_9_REV = 0x00008C3E;
        public const uint UNSIGNED_INT_8_8_8_8 = 0x00008035;
        public const uint UNSIGNED_INT_8_8_8_8_REV = 0x00008367;
        public const uint UNSIGNED_INT_SAMPLER_1D = 0x00008DD1;
        public const uint UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x00008DD6;
        public const uint UNSIGNED_INT_SAMPLER_2D = 0x00008DD2;
        public const uint UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x00008DD7;
        public const uint UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x0000910A;
        public const uint UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910D;
        public const uint UNSIGNED_INT_SAMPLER_2D_RECT = 0x00008DD5;
        public const uint UNSIGNED_INT_SAMPLER_3D = 0x00008DD3;
        public const uint UNSIGNED_INT_SAMPLER_BUFFER = 0x00008DD8;
        public const uint UNSIGNED_INT_SAMPLER_CUBE = 0x00008DD4;
        public const uint UNSIGNED_INT_VEC2 = 0x00008DC6;
        public const uint UNSIGNED_INT_VEC3 = 0x00008DC7;
        public const uint UNSIGNED_INT_VEC4 = 0x00008DC8;
        public const uint UNSIGNED_NORMALIZED = 0x00008C17;
        public const uint UNSIGNED_SHORT = 0x00001403;
        public const uint UNSIGNED_SHORT_1_5_5_5_REV = 0x00008366;
        public const uint UNSIGNED_SHORT_4_4_4_4 = 0x00008033;
        public const uint UNSIGNED_SHORT_4_4_4_4_REV = 0x00008365;
        public const uint UNSIGNED_SHORT_5_5_5_1 = 0x00008034;
        public const uint UNSIGNED_SHORT_5_6_5 = 0x00008363;
        public const uint UNSIGNED_SHORT_5_6_5_REV = 0x00008364;
        public const uint UPPER_LEFT = 0x00008CA2;
        public const uint VALIDATE_STATUS = 0x00008B83;
        public const uint VENDOR = 0x00001F00;
        public const uint VERSION = 0x00001F02;
        public const uint VERTEX_ARRAY_BINDING = 0x000085B5;
        public const uint VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x0000889F;
        public const uint VERTEX_ATTRIB_ARRAY_ENABLED = 0x00008622;
        public const uint VERTEX_ATTRIB_ARRAY_INTEGER = 0x000088FD;
        public const uint VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x0000886A;
        public const uint VERTEX_ATTRIB_ARRAY_POINTER = 0x00008645;
        public const uint VERTEX_ATTRIB_ARRAY_SIZE = 0x00008623;
        public const uint VERTEX_ATTRIB_ARRAY_STRIDE = 0x00008624;
        public const uint VERTEX_ATTRIB_ARRAY_TYPE = 0x00008625;
        public const uint VERTEX_PROGRAM_POINT_SIZE = 0x00008642;
        public const uint VERTEX_SHADER = 0x00008B31;
        public const uint VIEWPORT = 0x00000BA2;
        public const uint WAIT_FAILED = 0x0000911D;
        public const uint WRITE_ONLY = 0x000088B9;
        public const uint XOR = 0x00001506;
        public const uint ZERO = 0x00000000;


        public static class Delegates
        {
            public delegate void ActiveTexture(uint texture);
            public delegate void AttachShader(uint program, uint shader);
            public delegate void BeginConditionalRender(uint id, uint mode);
            public delegate void BeginQuery(uint target, uint id);
            public delegate void BeginTransformFeedback(uint primitiveMode);
            public delegate void BindAttribLocation(uint program, uint index, string name);
            public delegate void BindBuffer(uint target, uint buffer);
            public delegate void BindBufferBase(uint target, uint index, uint buffer);
            public delegate void BindBufferRange(uint target, uint index, uint buffer, System.IntPtr offset, System.IntPtr size);
            public delegate void BindFragDataLocation(uint program, uint color, string name);
            public delegate void BindFramebuffer(uint target, uint framebuffer);
            public delegate void BindRenderbuffer(uint target, uint renderbuffer);
            public delegate void BindTexture(uint target, uint texture);
            public delegate void BindVertexArray(uint array);
            public delegate void BlendColor(float red, float green, float blue, float alpha);
            public delegate void BlendEquation(uint mode);
            public delegate void BlendEquationSeparate(uint modeRGB, uint modeAlpha);
            public delegate void BlendFunc(uint sfactor, uint dfactor);
            public delegate void BlendFuncSeparate(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha);
            public delegate void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);
            public delegate void BufferData(uint target, System.IntPtr size, System.IntPtr data, uint usage);
            public delegate void BufferSubData(uint target, System.IntPtr offset, System.IntPtr size, System.IntPtr data);
            public delegate uint CheckFramebufferStatus(uint target);
            public delegate void ClampColor(uint target, uint clamp);
            public delegate void Clear(uint mask);
            public delegate void ClearBufferfi(uint buffer, int drawbuffer, float depth, int stencil);
            public delegate void ClearBufferfv(uint buffer, int drawbuffer, System.IntPtr value);
            public delegate void ClearBufferiv(uint buffer, int drawbuffer, System.IntPtr value);
            public delegate void ClearBufferuiv(uint buffer, int drawbuffer, System.IntPtr value);
            public delegate void ClearColor(float red, float green, float blue, float alpha);
            public delegate void ClearDepth(double depth);
            public delegate void ClearStencil(int s);
            public delegate uint ClientWaitSync(System.IntPtr sync, uint flags, ulong timeout);
            public delegate void ColorMask(bool red, bool green, bool blue, bool alpha);
            public delegate void ColorMaski(uint index, bool r, bool g, bool b, bool a);
            public delegate void CompileShader(uint shader);
            public delegate void CompressedTexImage1D(uint target, int level, uint internalformat, int width, int border, int imageSize, System.IntPtr data);
            public delegate void CompressedTexImage2D(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, System.IntPtr data);
            public delegate void CompressedTexImage3D(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, System.IntPtr data);
            public delegate void CompressedTexSubImage1D(uint target, int level, int xoffset, int width, uint format, int imageSize, System.IntPtr data);
            public delegate void CompressedTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, System.IntPtr data);
            public delegate void CompressedTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, System.IntPtr data);
            public delegate void CopyBufferSubData(uint readTarget, uint writeTarget, System.IntPtr readOffset, System.IntPtr writeOffset, System.IntPtr size);
            public delegate void CopyTexImage1D(uint target, int level, uint internalformat, int x, int y, int width, int border);
            public delegate void CopyTexImage2D(uint target, int level, uint internalformat, int x, int y, int width, int height, int border);
            public delegate void CopyTexSubImage1D(uint target, int level, int xoffset, int x, int y, int width);
            public delegate void CopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
            public delegate void CopyTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
            public delegate uint CreateProgram();
            public delegate uint CreateShader(uint type);
            public delegate void CullFace(uint mode);
            public delegate void DeleteBuffers(int n, System.IntPtr buffers);
            public delegate void DeleteFramebuffers(int n, System.IntPtr framebuffers);
            public delegate void DeleteProgram(uint program);
            public delegate void DeleteQueries(int n, System.IntPtr ids);
            public delegate void DeleteRenderbuffers(int n, System.IntPtr renderbuffers);
            public delegate void DeleteShader(uint shader);
            public delegate void DeleteSync(System.IntPtr sync);
            public delegate void DeleteTextures(int n, System.IntPtr textures);
            public delegate void DeleteVertexArrays(int n, System.IntPtr arrays);
            public delegate void DepthFunc(uint func);
            public delegate void DepthMask(bool flag);
            public delegate void DepthRange(double near, double far);
            public delegate void DetachShader(uint program, uint shader);
            public delegate void Disable(uint cap);
            public delegate void Disablei(uint target, uint index);
            public delegate void DisableVertexAttribArray(uint index);
            public delegate void DrawArrays(uint mode, int first, int count);
            public delegate void DrawArraysInstanced(uint mode, int first, int count, int instancecount);
            public delegate void DrawBuffer(uint mode);
            public delegate void DrawBuffers(int n, System.IntPtr bufs);
            public delegate void DrawElements(uint mode, int count, uint type, System.IntPtr indices);
            public delegate void DrawElementsBaseVertex(uint mode, int count, uint type, System.IntPtr indices, int basevertex);
            public delegate void DrawElementsInstanced(uint mode, int count, uint type, System.IntPtr indices, int instancecount);
            public delegate void DrawElementsInstancedBaseVertex(uint mode, int count, uint type, System.IntPtr indices, int instancecount, int basevertex);
            public delegate void DrawRangeElements(uint mode, uint start, uint end, int count, uint type, System.IntPtr indices);
            public delegate void DrawRangeElementsBaseVertex(uint mode, uint start, uint end, int count, uint type, System.IntPtr indices, int basevertex);
            public delegate void Enable(uint cap);
            public delegate void Enablei(uint target, uint index);
            public delegate void EnableVertexAttribArray(uint index);
            public delegate void EndConditionalRender();
            public delegate void EndQuery(uint target);
            public delegate void EndTransformFeedback();
            public delegate System.IntPtr FenceSync(uint condition, uint flags);
            public delegate void Finish();
            public delegate void Flush();
            public delegate void FlushMappedBufferRange(uint target, System.IntPtr offset, System.IntPtr length);
            public delegate void FramebufferRenderbuffer(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer);
            public delegate void FramebufferTexture(uint target, uint attachment, uint texture, int level);
            public delegate void FramebufferTexture1D(uint target, uint attachment, uint textarget, uint texture, int level);
            public delegate void FramebufferTexture2D(uint target, uint attachment, uint textarget, uint texture, int level);
            public delegate void FramebufferTexture3D(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset);
            public delegate void FramebufferTextureLayer(uint target, uint attachment, uint texture, int level, int layer);
            public delegate void FrontFace(uint mode);
            public delegate void GenBuffers(int n, System.IntPtr buffers);
            public delegate void GenerateMipmap(uint target);
            public delegate void GenFramebuffers(int n, System.IntPtr framebuffers);
            public delegate void GenQueries(int n, System.IntPtr ids);
            public delegate void GenRenderbuffers(int n, System.IntPtr renderbuffers);
            public delegate void GenTextures(int n, System.IntPtr textures);
            public delegate void GenVertexArrays(int n, System.IntPtr arrays);
            public delegate void GetActiveAttrib(uint program, uint index, int bufSize, System.IntPtr length, System.IntPtr size, System.IntPtr type, string name);
            public delegate void GetActiveUniform(uint program, uint index, int bufSize, System.IntPtr length, System.IntPtr size, System.IntPtr type, string name);
            public delegate void GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, uint pname, System.IntPtr _params);
            public delegate void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, System.IntPtr length, string uniformBlockName);
            public delegate void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, System.IntPtr length, string uniformName);
            public delegate void GetActiveUniformsiv(uint program, int uniformCount, System.IntPtr uniformIndices, uint pname, System.IntPtr _params);
            public delegate void GetAttachedShaders(uint program, int maxCount, System.IntPtr count, System.IntPtr shaders);
            public delegate int GetAttribLocation(uint program, string name);
            public delegate void GetBooleani_v(uint target, uint index, System.IntPtr data);
            public delegate void GetBooleanv(uint pname, System.IntPtr data);
            public delegate void GetBufferParameteri64v(uint target, uint pname, System.IntPtr _params);
            public delegate void GetBufferParameteriv(uint target, uint pname, System.IntPtr _params);
            public delegate void GetBufferPointerv(uint target, uint pname, System.IntPtr _params);
            public delegate void GetBufferSubData(uint target, System.IntPtr offset, System.IntPtr size, System.IntPtr data);
            public delegate void GetCompressedTexImage(uint target, int level, System.IntPtr img);
            public delegate void GetDoublev(uint pname, System.IntPtr data);
            public delegate uint GetError();
            public delegate void GetFloatv(uint pname, System.IntPtr data);
            public delegate int GetFragDataLocation(uint program, string name);
            public delegate void GetFramebufferAttachmentParameteriv(uint target, uint attachment, uint pname, System.IntPtr _params);
            public delegate void GetInteger64i_v(uint target, uint index, System.IntPtr data);
            public delegate void GetInteger64v(uint pname, System.IntPtr data);
            public delegate void GetIntegeri_v(uint target, uint index, System.IntPtr data);
            public delegate void GetIntegerv(uint pname, System.IntPtr data);
            public delegate void GetMultisamplefv(uint pname, uint index, System.IntPtr val);
            public delegate void GetProgramInfoLog(uint program, int bufSize, System.IntPtr length, string infoLog);
            public delegate void GetProgramiv(uint program, uint pname, System.IntPtr _params);
            public delegate void GetQueryiv(uint target, uint pname, System.IntPtr _params);
            public delegate void GetQueryObjectiv(uint id, uint pname, System.IntPtr _params);
            public delegate void GetQueryObjectuiv(uint id, uint pname, System.IntPtr _params);
            public delegate void GetRenderbufferParameteriv(uint target, uint pname, System.IntPtr _params);
            public delegate void GetShaderInfoLog(uint shader, int bufSize, System.IntPtr length, string infoLog);
            public delegate void GetShaderiv(uint shader, uint pname, System.IntPtr _params);
            public delegate void GetShaderSource(uint shader, int bufSize, System.IntPtr length, string source);
            public delegate System.IntPtr GetString(uint name);
            public delegate System.IntPtr GetStringi(uint name, uint index);
            public delegate void GetSynciv(System.IntPtr sync, uint pname, int bufSize, System.IntPtr length, System.IntPtr values);
            public delegate void GetTexImage(uint target, int level, uint format, uint type, System.IntPtr pixels);
            public delegate void GetTexLevelParameterfv(uint target, int level, uint pname, System.IntPtr _params);
            public delegate void GetTexLevelParameteriv(uint target, int level, uint pname, System.IntPtr _params);
            public delegate void GetTexParameterfv(uint target, uint pname, System.IntPtr _params);
            public delegate void GetTexParameterIiv(uint target, uint pname, System.IntPtr _params);
            public delegate void GetTexParameterIuiv(uint target, uint pname, System.IntPtr _params);
            public delegate void GetTexParameteriv(uint target, uint pname, System.IntPtr _params);
            public delegate void GetTransformFeedbackVarying(uint program, uint index, int bufSize, System.IntPtr length, System.IntPtr size, System.IntPtr type, string name);
            public delegate uint GetUniformBlockIndex(uint program, string uniformBlockName);
            public delegate void GetUniformfv(uint program, int location, System.IntPtr _params);
            public delegate void GetUniformIndices(uint program, int uniformCount, System.IntPtr uniformNames, System.IntPtr uniformIndices);
            public delegate void GetUniformiv(uint program, int location, System.IntPtr _params);
            public delegate int GetUniformLocation(uint program, string name);
            public delegate void GetUniformuiv(uint program, int location, System.IntPtr _params);
            public delegate void GetVertexAttribdv(uint index, uint pname, System.IntPtr _params);
            public delegate void GetVertexAttribfv(uint index, uint pname, System.IntPtr _params);
            public delegate void GetVertexAttribIiv(uint index, uint pname, System.IntPtr _params);
            public delegate void GetVertexAttribIuiv(uint index, uint pname, System.IntPtr _params);
            public delegate void GetVertexAttribiv(uint index, uint pname, System.IntPtr _params);
            public delegate void GetVertexAttribPointerv(uint index, uint pname, System.IntPtr pointer);
            public delegate void Hint(uint target, uint mode);
            public delegate bool IsBuffer(uint buffer);
            public delegate bool IsEnabled(uint cap);
            public delegate bool IsEnabledi(uint target, uint index);
            public delegate bool IsFramebuffer(uint framebuffer);
            public delegate bool IsProgram(uint program);
            public delegate bool IsQuery(uint id);
            public delegate bool IsRenderbuffer(uint renderbuffer);
            public delegate bool IsShader(uint shader);
            public delegate bool IsSync(System.IntPtr sync);
            public delegate bool IsTexture(uint texture);
            public delegate bool IsVertexArray(uint array);
            public delegate void LineWidth(float width);
            public delegate void LinkProgram(uint program);
            public delegate void LogicOp(uint opcode);
            public delegate System.IntPtr MapBuffer(uint target, uint access);
            public delegate System.IntPtr MapBufferRange(uint target, System.IntPtr offset, System.IntPtr length, uint access);
            public delegate void MultiDrawArrays(uint mode, System.IntPtr first, System.IntPtr count, int drawcount);
            public delegate void MultiDrawElements(uint mode, System.IntPtr count, uint type, System.IntPtr indices, int drawcount);
            public delegate void MultiDrawElementsBaseVertex(uint mode, System.IntPtr count, uint type, System.IntPtr indices, int drawcount, System.IntPtr basevertex);
            public delegate void PixelStoref(uint pname, float param);
            public delegate void PixelStorei(uint pname, int param);
            public delegate void PointParameterf(uint pname, float param);
            public delegate void PointParameterfv(uint pname, System.IntPtr _params);
            public delegate void PointParameteri(uint pname, int param);
            public delegate void PointParameteriv(uint pname, System.IntPtr _params);
            public delegate void PointSize(float size);
            public delegate void PolygonMode(uint face, uint mode);
            public delegate void PolygonOffset(float factor, float units);
            public delegate void PrimitiveRestartIndex(uint index);
            public delegate void ProvokingVertex(uint mode);
            public delegate void ReadBuffer(uint mode);
            public delegate void ReadPixels(int x, int y, int width, int height, uint format, uint type, System.IntPtr pixels);
            public delegate void RenderbufferStorage(uint target, uint internalformat, int width, int height);
            public delegate void RenderbufferStorageMultisample(uint target, int samples, uint internalformat, int width, int height);
            public delegate void SampleCoverage(float value, bool invert);
            public delegate void SampleMaski(uint index, uint mask);
            public delegate void Scissor(int x, int y, int width, int height);
            public delegate void ShaderSource(uint shader, int count, System.IntPtr _string, System.IntPtr length);
            public delegate void StencilFunc(uint func, int _ref, uint mask);
            public delegate void StencilFuncSeparate(uint face, uint func, int _ref, uint mask);
            public delegate void StencilMask(uint mask);
            public delegate void StencilMaskSeparate(uint face, uint mask);
            public delegate void StencilOp(uint fail, uint zfail, uint zpass);
            public delegate void StencilOpSeparate(uint face, uint sfail, uint dpfail, uint dppass);
            public delegate void TexBuffer(uint target, uint internalformat, uint buffer);
            public delegate void TexImage1D(uint target, int level, int internalformat, int width, int border, uint format, uint type, System.IntPtr pixels);
            public delegate void TexImage2D(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, System.IntPtr pixels);
            public delegate void TexImage2DMultisample(uint target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations);
            public delegate void TexImage3D(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, System.IntPtr pixels);
            public delegate void TexImage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations);
            public delegate void TexParameterf(uint target, uint pname, float param);
            public delegate void TexParameterfv(uint target, uint pname, System.IntPtr _params);
            public delegate void TexParameteri(uint target, uint pname, int param);
            public delegate void TexParameterIiv(uint target, uint pname, System.IntPtr _params);
            public delegate void TexParameterIuiv(uint target, uint pname, System.IntPtr _params);
            public delegate void TexParameteriv(uint target, uint pname, System.IntPtr _params);
            public delegate void TexSubImage1D(uint target, int level, int xoffset, int width, uint format, uint type, System.IntPtr pixels);
            public delegate void TexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, System.IntPtr pixels);
            public delegate void TexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, System.IntPtr pixels);
            public delegate void TransformFeedbackVaryings(uint program, int count, System.IntPtr varyings, uint bufferMode);
            public delegate void Uniform1f(int location, float v0);
            public delegate void Uniform1fv(int location, int count, System.IntPtr value);
            public delegate void Uniform1i(int location, int v0);
            public delegate void Uniform1iv(int location, int count, System.IntPtr value);
            public delegate void Uniform1ui(int location, uint v0);
            public delegate void Uniform1uiv(int location, int count, System.IntPtr value);
            public delegate void Uniform2f(int location, float v0, float v1);
            public delegate void Uniform2fv(int location, int count, System.IntPtr value);
            public delegate void Uniform2i(int location, int v0, int v1);
            public delegate void Uniform2iv(int location, int count, System.IntPtr value);
            public delegate void Uniform2ui(int location, uint v0, uint v1);
            public delegate void Uniform2uiv(int location, int count, System.IntPtr value);
            public delegate void Uniform3f(int location, float v0, float v1, float v2);
            public delegate void Uniform3fv(int location, int count, System.IntPtr value);
            public delegate void Uniform3i(int location, int v0, int v1, int v2);
            public delegate void Uniform3iv(int location, int count, System.IntPtr value);
            public delegate void Uniform3ui(int location, uint v0, uint v1, uint v2);
            public delegate void Uniform3uiv(int location, int count, System.IntPtr value);
            public delegate void Uniform4f(int location, float v0, float v1, float v2, float v3);
            public delegate void Uniform4fv(int location, int count, System.IntPtr value);
            public delegate void Uniform4i(int location, int v0, int v1, int v2, int v3);
            public delegate void Uniform4iv(int location, int count, System.IntPtr value);
            public delegate void Uniform4ui(int location, uint v0, uint v1, uint v2, uint v3);
            public delegate void Uniform4uiv(int location, int count, System.IntPtr value);
            public delegate void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding);
            public delegate void UniformMatrix2fv(int location, int count, bool transpose, System.IntPtr value);
            public delegate void UniformMatrix2x3fv(int location, int count, bool transpose, System.IntPtr value);
            public delegate void UniformMatrix2x4fv(int location, int count, bool transpose, System.IntPtr value);
            public delegate void UniformMatrix3fv(int location, int count, bool transpose, System.IntPtr value);
            public delegate void UniformMatrix3x2fv(int location, int count, bool transpose, System.IntPtr value);
            public delegate void UniformMatrix3x4fv(int location, int count, bool transpose, System.IntPtr value);
            public delegate void UniformMatrix4fv(int location, int count, bool transpose, System.IntPtr value);
            public delegate void UniformMatrix4x2fv(int location, int count, bool transpose, System.IntPtr value);
            public delegate void UniformMatrix4x3fv(int location, int count, bool transpose, System.IntPtr value);
            public delegate bool UnmapBuffer(uint target);
            public delegate void UseProgram(uint program);
            public delegate void ValidateProgram(uint program);
            public delegate void VertexAttrib1d(uint index, double x);
            public delegate void VertexAttrib1dv(uint index, System.IntPtr v);
            public delegate void VertexAttrib1f(uint index, float x);
            public delegate void VertexAttrib1fv(uint index, System.IntPtr v);
            public delegate void VertexAttrib1s(uint index, short x);
            public delegate void VertexAttrib1sv(uint index, System.IntPtr v);
            public delegate void VertexAttrib2d(uint index, double x, double y);
            public delegate void VertexAttrib2dv(uint index, System.IntPtr v);
            public delegate void VertexAttrib2f(uint index, float x, float y);
            public delegate void VertexAttrib2fv(uint index, System.IntPtr v);
            public delegate void VertexAttrib2s(uint index, short x, short y);
            public delegate void VertexAttrib2sv(uint index, System.IntPtr v);
            public delegate void VertexAttrib3d(uint index, double x, double y, double z);
            public delegate void VertexAttrib3dv(uint index, System.IntPtr v);
            public delegate void VertexAttrib3f(uint index, float x, float y, float z);
            public delegate void VertexAttrib3fv(uint index, System.IntPtr v);
            public delegate void VertexAttrib3s(uint index, short x, short y, short z);
            public delegate void VertexAttrib3sv(uint index, System.IntPtr v);
            public delegate void VertexAttrib4bv(uint index, System.IntPtr v);
            public delegate void VertexAttrib4d(uint index, double x, double y, double z, double w);
            public delegate void VertexAttrib4dv(uint index, System.IntPtr v);
            public delegate void VertexAttrib4f(uint index, float x, float y, float z, float w);
            public delegate void VertexAttrib4fv(uint index, System.IntPtr v);
            public delegate void VertexAttrib4iv(uint index, System.IntPtr v);
            public delegate void VertexAttrib4Nbv(uint index, System.IntPtr v);
            public delegate void VertexAttrib4Niv(uint index, System.IntPtr v);
            public delegate void VertexAttrib4Nsv(uint index, System.IntPtr v);
            public delegate void VertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w);
            public delegate void VertexAttrib4Nubv(uint index, System.IntPtr v);
            public delegate void VertexAttrib4Nuiv(uint index, System.IntPtr v);
            public delegate void VertexAttrib4Nusv(uint index, System.IntPtr v);
            public delegate void VertexAttrib4s(uint index, short x, short y, short z, short w);
            public delegate void VertexAttrib4sv(uint index, System.IntPtr v);
            public delegate void VertexAttrib4ubv(uint index, System.IntPtr v);
            public delegate void VertexAttrib4uiv(uint index, System.IntPtr v);
            public delegate void VertexAttrib4usv(uint index, System.IntPtr v);
            public delegate void VertexAttribI1i(uint index, int x);
            public delegate void VertexAttribI1iv(uint index, System.IntPtr v);
            public delegate void VertexAttribI1ui(uint index, uint x);
            public delegate void VertexAttribI1uiv(uint index, System.IntPtr v);
            public delegate void VertexAttribI2i(uint index, int x, int y);
            public delegate void VertexAttribI2iv(uint index, System.IntPtr v);
            public delegate void VertexAttribI2ui(uint index, uint x, uint y);
            public delegate void VertexAttribI2uiv(uint index, System.IntPtr v);
            public delegate void VertexAttribI3i(uint index, int x, int y, int z);
            public delegate void VertexAttribI3iv(uint index, System.IntPtr v);
            public delegate void VertexAttribI3ui(uint index, uint x, uint y, uint z);
            public delegate void VertexAttribI3uiv(uint index, System.IntPtr v);
            public delegate void VertexAttribI4bv(uint index, System.IntPtr v);
            public delegate void VertexAttribI4i(uint index, int x, int y, int z, int w);
            public delegate void VertexAttribI4iv(uint index, System.IntPtr v);
            public delegate void VertexAttribI4sv(uint index, System.IntPtr v);
            public delegate void VertexAttribI4ubv(uint index, System.IntPtr v);
            public delegate void VertexAttribI4ui(uint index, uint x, uint y, uint z, uint w);
            public delegate void VertexAttribI4uiv(uint index, System.IntPtr v);
            public delegate void VertexAttribI4usv(uint index, System.IntPtr v);
            public delegate void VertexAttribIPointer(uint index, int size, uint type, int stride, System.IntPtr pointer);
            public delegate void VertexAttribPointer(uint index, int size, uint type, bool normalized, int stride, System.IntPtr pointer);
            public delegate void Viewport(int x, int y, int width, int height);
            public delegate void WaitSync(System.IntPtr sync, uint flags, ulong timeout);


            #region Modified Delegates
            public delegate void Viewport_Box(Box2i dimensions);
            #endregion
        }


        internal readonly Delegates.ActiveTexture ActiveTexture;
        internal readonly Delegates.AttachShader AttachShader;
        internal readonly Delegates.BeginConditionalRender BeginConditionalRender;
        internal readonly Delegates.BeginQuery BeginQuery;
        internal readonly Delegates.BeginTransformFeedback BeginTransformFeedback;
        internal readonly Delegates.BindAttribLocation BindAttribLocation;
        internal readonly Delegates.BindBuffer BindBuffer;
        internal readonly Delegates.BindBufferBase BindBufferBase;
        internal readonly Delegates.BindBufferRange BindBufferRange;
        internal readonly Delegates.BindFragDataLocation BindFragDataLocation;
        internal readonly Delegates.BindFramebuffer BindFramebuffer;
        internal readonly Delegates.BindRenderbuffer BindRenderbuffer;
        internal readonly Delegates.BindTexture BindTexture;
        internal readonly Delegates.BindVertexArray BindVertexArray;
        internal readonly Delegates.BlendColor BlendColor;
        internal readonly Delegates.BlendEquation BlendEquation;
        internal readonly Delegates.BlendEquationSeparate BlendEquationSeparate;
        internal readonly Delegates.BlendFunc BlendFunc;
        internal readonly Delegates.BlendFuncSeparate BlendFuncSeparate;
        internal readonly Delegates.BlitFramebuffer BlitFramebuffer;
        internal readonly Delegates.BufferData BufferData;
        internal readonly Delegates.BufferSubData BufferSubData;
        internal readonly Delegates.CheckFramebufferStatus CheckFramebufferStatus;
        internal readonly Delegates.ClampColor ClampColor;
        internal readonly Delegates.Clear Clear;
        internal readonly Delegates.ClearBufferfi ClearBufferfi;
        internal readonly Delegates.ClearBufferfv ClearBufferfv;
        internal readonly Delegates.ClearBufferiv ClearBufferiv;
        internal readonly Delegates.ClearBufferuiv ClearBufferuiv;
        internal readonly Delegates.ClearColor ClearColor;
        internal readonly Delegates.ClearDepth ClearDepth;
        internal readonly Delegates.ClearStencil ClearStencil;
        internal readonly Delegates.ClientWaitSync ClientWaitSync;
        internal readonly Delegates.ColorMask ColorMask;
        internal readonly Delegates.ColorMaski ColorMaski;
        internal readonly Delegates.CompileShader CompileShader;
        internal readonly Delegates.CompressedTexImage1D CompressedTexImage1D;
        internal readonly Delegates.CompressedTexImage2D CompressedTexImage2D;
        internal readonly Delegates.CompressedTexImage3D CompressedTexImage3D;
        internal readonly Delegates.CompressedTexSubImage1D CompressedTexSubImage1D;
        internal readonly Delegates.CompressedTexSubImage2D CompressedTexSubImage2D;
        internal readonly Delegates.CompressedTexSubImage3D CompressedTexSubImage3D;
        internal readonly Delegates.CopyBufferSubData CopyBufferSubData;
        internal readonly Delegates.CopyTexImage1D CopyTexImage1D;
        internal readonly Delegates.CopyTexImage2D CopyTexImage2D;
        internal readonly Delegates.CopyTexSubImage1D CopyTexSubImage1D;
        internal readonly Delegates.CopyTexSubImage2D CopyTexSubImage2D;
        internal readonly Delegates.CopyTexSubImage3D CopyTexSubImage3D;
        internal readonly Delegates.CreateProgram CreateProgram;
        internal readonly Delegates.CreateShader CreateShader;
        internal readonly Delegates.CullFace CullFace;
        internal readonly Delegates.DeleteBuffers DeleteBuffers;
        internal readonly Delegates.DeleteFramebuffers DeleteFramebuffers;
        internal readonly Delegates.DeleteProgram DeleteProgram;
        internal readonly Delegates.DeleteQueries DeleteQueries;
        internal readonly Delegates.DeleteRenderbuffers DeleteRenderbuffers;
        internal readonly Delegates.DeleteShader DeleteShader;
        internal readonly Delegates.DeleteSync DeleteSync;
        internal readonly Delegates.DeleteTextures DeleteTextures;
        internal readonly Delegates.DeleteVertexArrays DeleteVertexArrays;
        internal readonly Delegates.DepthFunc DepthFunc;
        internal readonly Delegates.DepthMask DepthMask;
        internal readonly Delegates.DepthRange DepthRange;
        internal readonly Delegates.DetachShader DetachShader;
        internal readonly Delegates.Disable Disable;
        internal readonly Delegates.Disablei Disablei;
        internal readonly Delegates.DisableVertexAttribArray DisableVertexAttribArray;
        internal readonly Delegates.DrawArrays DrawArrays;
        internal readonly Delegates.DrawArraysInstanced DrawArraysInstanced;
        internal readonly Delegates.DrawBuffer DrawBuffer;
        internal readonly Delegates.DrawBuffers DrawBuffers;
        internal readonly Delegates.DrawElements DrawElements;
        internal readonly Delegates.DrawElementsBaseVertex DrawElementsBaseVertex;
        internal readonly Delegates.DrawElementsInstanced DrawElementsInstanced;
        internal readonly Delegates.DrawElementsInstancedBaseVertex DrawElementsInstancedBaseVertex;
        internal readonly Delegates.DrawRangeElements DrawRangeElements;
        internal readonly Delegates.DrawRangeElementsBaseVertex DrawRangeElementsBaseVertex;
        internal readonly Delegates.Enable Enable;
        internal readonly Delegates.Enablei Enablei;
        internal readonly Delegates.EnableVertexAttribArray EnableVertexAttribArray;
        internal readonly Delegates.EndConditionalRender EndConditionalRender;
        internal readonly Delegates.EndQuery EndQuery;
        internal readonly Delegates.EndTransformFeedback EndTransformFeedback;
        internal readonly Delegates.FenceSync FenceSync;
        internal readonly Delegates.Finish Finish;
        internal readonly Delegates.Flush Flush;
        internal readonly Delegates.FlushMappedBufferRange FlushMappedBufferRange;
        internal readonly Delegates.FramebufferRenderbuffer FramebufferRenderbuffer;
        internal readonly Delegates.FramebufferTexture FramebufferTexture;
        internal readonly Delegates.FramebufferTexture1D FramebufferTexture1D;
        internal readonly Delegates.FramebufferTexture2D FramebufferTexture2D;
        internal readonly Delegates.FramebufferTexture3D FramebufferTexture3D;
        internal readonly Delegates.FramebufferTextureLayer FramebufferTextureLayer;
        internal readonly Delegates.FrontFace FrontFace;
        internal readonly Delegates.GenBuffers GenBuffers;
        internal readonly Delegates.GenerateMipmap GenerateMipmap;
        internal readonly Delegates.GenFramebuffers GenFramebuffers;
        internal readonly Delegates.GenQueries GenQueries;
        internal readonly Delegates.GenRenderbuffers GenRenderbuffers;
        internal readonly Delegates.GenTextures GenTextures;
        internal readonly Delegates.GenVertexArrays GenVertexArrays;
        internal readonly Delegates.GetActiveAttrib GetActiveAttrib;
        internal readonly Delegates.GetActiveUniform GetActiveUniform;
        internal readonly Delegates.GetActiveUniformBlockiv GetActiveUniformBlockiv;
        internal readonly Delegates.GetActiveUniformBlockName GetActiveUniformBlockName;
        internal readonly Delegates.GetActiveUniformName GetActiveUniformName;
        internal readonly Delegates.GetActiveUniformsiv GetActiveUniformsiv;
        internal readonly Delegates.GetAttachedShaders GetAttachedShaders;
        internal readonly Delegates.GetAttribLocation GetAttribLocation;
        internal readonly Delegates.GetBooleani_v GetBooleani_v;
        internal readonly Delegates.GetBooleanv GetBooleanv;
        internal readonly Delegates.GetBufferParameteri64v GetBufferParameteri64v;
        internal readonly Delegates.GetBufferParameteriv GetBufferParameteriv;
        internal readonly Delegates.GetBufferPointerv GetBufferPointerv;
        internal readonly Delegates.GetBufferSubData GetBufferSubData;
        internal readonly Delegates.GetCompressedTexImage GetCompressedTexImage;
        internal readonly Delegates.GetDoublev GetDoublev;
        internal readonly Delegates.GetError GetError;
        internal readonly Delegates.GetFloatv GetFloatv;
        internal readonly Delegates.GetFragDataLocation GetFragDataLocation;
        internal readonly Delegates.GetFramebufferAttachmentParameteriv GetFramebufferAttachmentParameteriv;
        internal readonly Delegates.GetInteger64i_v GetInteger64i_v;
        internal readonly Delegates.GetInteger64v GetInteger64v;
        internal readonly Delegates.GetIntegeri_v GetIntegeri_v;
        internal readonly Delegates.GetIntegerv GetIntegerv;
        internal readonly Delegates.GetMultisamplefv GetMultisamplefv;
        internal readonly Delegates.GetProgramInfoLog GetProgramInfoLog;
        internal readonly Delegates.GetProgramiv GetProgramiv;
        internal readonly Delegates.GetQueryiv GetQueryiv;
        internal readonly Delegates.GetQueryObjectiv GetQueryObjectiv;
        internal readonly Delegates.GetQueryObjectuiv GetQueryObjectuiv;
        internal readonly Delegates.GetRenderbufferParameteriv GetRenderbufferParameteriv;
        internal readonly Delegates.GetShaderInfoLog GetShaderInfoLog;
        internal readonly Delegates.GetShaderiv GetShaderiv;
        internal readonly Delegates.GetShaderSource GetShaderSource;
        internal readonly Delegates.GetString GetString;
        internal readonly Delegates.GetStringi GetStringi;
        internal readonly Delegates.GetSynciv GetSynciv;
        internal readonly Delegates.GetTexImage GetTexImage;
        internal readonly Delegates.GetTexLevelParameterfv GetTexLevelParameterfv;
        internal readonly Delegates.GetTexLevelParameteriv GetTexLevelParameteriv;
        internal readonly Delegates.GetTexParameterfv GetTexParameterfv;
        internal readonly Delegates.GetTexParameterIiv GetTexParameterIiv;
        internal readonly Delegates.GetTexParameterIuiv GetTexParameterIuiv;
        internal readonly Delegates.GetTexParameteriv GetTexParameteriv;
        internal readonly Delegates.GetTransformFeedbackVarying GetTransformFeedbackVarying;
        internal readonly Delegates.GetUniformBlockIndex GetUniformBlockIndex;
        internal readonly Delegates.GetUniformfv GetUniformfv;
        internal readonly Delegates.GetUniformIndices GetUniformIndices;
        internal readonly Delegates.GetUniformiv GetUniformiv;
        internal readonly Delegates.GetUniformLocation GetUniformLocation;
        internal readonly Delegates.GetUniformuiv GetUniformuiv;
        internal readonly Delegates.GetVertexAttribdv GetVertexAttribdv;
        internal readonly Delegates.GetVertexAttribfv GetVertexAttribfv;
        internal readonly Delegates.GetVertexAttribIiv GetVertexAttribIiv;
        internal readonly Delegates.GetVertexAttribIuiv GetVertexAttribIuiv;
        internal readonly Delegates.GetVertexAttribiv GetVertexAttribiv;
        internal readonly Delegates.GetVertexAttribPointerv GetVertexAttribPointerv;
        internal readonly Delegates.Hint Hint;
        internal readonly Delegates.IsBuffer IsBuffer;
        internal readonly Delegates.IsEnabled IsEnabled;
        internal readonly Delegates.IsEnabledi IsEnabledi;
        internal readonly Delegates.IsFramebuffer IsFramebuffer;
        internal readonly Delegates.IsProgram IsProgram;
        internal readonly Delegates.IsQuery IsQuery;
        internal readonly Delegates.IsRenderbuffer IsRenderbuffer;
        internal readonly Delegates.IsShader IsShader;
        internal readonly Delegates.IsSync IsSync;
        internal readonly Delegates.IsTexture IsTexture;
        internal readonly Delegates.IsVertexArray IsVertexArray;
        internal readonly Delegates.LineWidth LineWidth;
        internal readonly Delegates.LinkProgram LinkProgram;
        internal readonly Delegates.LogicOp LogicOp;
        internal readonly Delegates.MapBuffer MapBuffer;
        internal readonly Delegates.MapBufferRange MapBufferRange;
        internal readonly Delegates.MultiDrawArrays MultiDrawArrays;
        internal readonly Delegates.MultiDrawElements MultiDrawElements;
        internal readonly Delegates.MultiDrawElementsBaseVertex MultiDrawElementsBaseVertex;
        internal readonly Delegates.PixelStoref PixelStoref;
        internal readonly Delegates.PixelStorei PixelStorei;
        internal readonly Delegates.PointParameterf PointParameterf;
        internal readonly Delegates.PointParameterfv PointParameterfv;
        internal readonly Delegates.PointParameteri PointParameteri;
        internal readonly Delegates.PointParameteriv PointParameteriv;
        internal readonly Delegates.PointSize PointSize;
        internal readonly Delegates.PolygonMode PolygonMode;
        internal readonly Delegates.PolygonOffset PolygonOffset;
        internal readonly Delegates.PrimitiveRestartIndex PrimitiveRestartIndex;
        internal readonly Delegates.ProvokingVertex ProvokingVertex;
        internal readonly Delegates.ReadBuffer ReadBuffer;
        internal readonly Delegates.ReadPixels ReadPixels;
        internal readonly Delegates.RenderbufferStorage RenderbufferStorage;
        internal readonly Delegates.RenderbufferStorageMultisample RenderbufferStorageMultisample;
        internal readonly Delegates.SampleCoverage SampleCoverage;
        internal readonly Delegates.SampleMaski SampleMaski;
        internal readonly Delegates.Scissor Scissor;
        internal readonly Delegates.ShaderSource ShaderSource;
        internal readonly Delegates.StencilFunc StencilFunc;
        internal readonly Delegates.StencilFuncSeparate StencilFuncSeparate;
        internal readonly Delegates.StencilMask StencilMask;
        internal readonly Delegates.StencilMaskSeparate StencilMaskSeparate;
        internal readonly Delegates.StencilOp StencilOp;
        internal readonly Delegates.StencilOpSeparate StencilOpSeparate;
        internal readonly Delegates.TexBuffer TexBuffer;
        internal readonly Delegates.TexImage1D TexImage1D;
        internal readonly Delegates.TexImage2D TexImage2D;
        internal readonly Delegates.TexImage2DMultisample TexImage2DMultisample;
        internal readonly Delegates.TexImage3D TexImage3D;
        internal readonly Delegates.TexImage3DMultisample TexImage3DMultisample;
        internal readonly Delegates.TexParameterf TexParameterf;
        internal readonly Delegates.TexParameterfv TexParameterfv;
        internal readonly Delegates.TexParameteri TexParameteri;
        internal readonly Delegates.TexParameterIiv TexParameterIiv;
        internal readonly Delegates.TexParameterIuiv TexParameterIuiv;
        internal readonly Delegates.TexParameteriv TexParameteriv;
        internal readonly Delegates.TexSubImage1D TexSubImage1D;
        internal readonly Delegates.TexSubImage2D TexSubImage2D;
        internal readonly Delegates.TexSubImage3D TexSubImage3D;
        internal readonly Delegates.TransformFeedbackVaryings TransformFeedbackVaryings;
        internal readonly Delegates.Uniform1f Uniform1f;
        internal readonly Delegates.Uniform1fv Uniform1fv;
        internal readonly Delegates.Uniform1i Uniform1i;
        internal readonly Delegates.Uniform1iv Uniform1iv;
        internal readonly Delegates.Uniform1ui Uniform1ui;
        internal readonly Delegates.Uniform1uiv Uniform1uiv;
        internal readonly Delegates.Uniform2f Uniform2f;
        internal readonly Delegates.Uniform2fv Uniform2fv;
        internal readonly Delegates.Uniform2i Uniform2i;
        internal readonly Delegates.Uniform2iv Uniform2iv;
        internal readonly Delegates.Uniform2ui Uniform2ui;
        internal readonly Delegates.Uniform2uiv Uniform2uiv;
        internal readonly Delegates.Uniform3f Uniform3f;
        internal readonly Delegates.Uniform3fv Uniform3fv;
        internal readonly Delegates.Uniform3i Uniform3i;
        internal readonly Delegates.Uniform3iv Uniform3iv;
        internal readonly Delegates.Uniform3ui Uniform3ui;
        internal readonly Delegates.Uniform3uiv Uniform3uiv;
        internal readonly Delegates.Uniform4f Uniform4f;
        internal readonly Delegates.Uniform4fv Uniform4fv;
        internal readonly Delegates.Uniform4i Uniform4i;
        internal readonly Delegates.Uniform4iv Uniform4iv;
        internal readonly Delegates.Uniform4ui Uniform4ui;
        internal readonly Delegates.Uniform4uiv Uniform4uiv;
        internal readonly Delegates.UniformBlockBinding UniformBlockBinding;
        internal readonly Delegates.UniformMatrix2fv UniformMatrix2fv;
        internal readonly Delegates.UniformMatrix2x3fv UniformMatrix2x3fv;
        internal readonly Delegates.UniformMatrix2x4fv UniformMatrix2x4fv;
        internal readonly Delegates.UniformMatrix3fv UniformMatrix3fv;
        internal readonly Delegates.UniformMatrix3x2fv UniformMatrix3x2fv;
        internal readonly Delegates.UniformMatrix3x4fv UniformMatrix3x4fv;
        internal readonly Delegates.UniformMatrix4fv UniformMatrix4fv;
        internal readonly Delegates.UniformMatrix4x2fv UniformMatrix4x2fv;
        internal readonly Delegates.UniformMatrix4x3fv UniformMatrix4x3fv;
        internal readonly Delegates.UnmapBuffer UnmapBuffer;
        internal readonly Delegates.UseProgram UseProgram;
        internal readonly Delegates.ValidateProgram ValidateProgram;
        internal readonly Delegates.VertexAttrib1d VertexAttrib1d;
        internal readonly Delegates.VertexAttrib1dv VertexAttrib1dv;
        internal readonly Delegates.VertexAttrib1f VertexAttrib1f;
        internal readonly Delegates.VertexAttrib1fv VertexAttrib1fv;
        internal readonly Delegates.VertexAttrib1s VertexAttrib1s;
        internal readonly Delegates.VertexAttrib1sv VertexAttrib1sv;
        internal readonly Delegates.VertexAttrib2d VertexAttrib2d;
        internal readonly Delegates.VertexAttrib2dv VertexAttrib2dv;
        internal readonly Delegates.VertexAttrib2f VertexAttrib2f;
        internal readonly Delegates.VertexAttrib2fv VertexAttrib2fv;
        internal readonly Delegates.VertexAttrib2s VertexAttrib2s;
        internal readonly Delegates.VertexAttrib2sv VertexAttrib2sv;
        internal readonly Delegates.VertexAttrib3d VertexAttrib3d;
        internal readonly Delegates.VertexAttrib3dv VertexAttrib3dv;
        internal readonly Delegates.VertexAttrib3f VertexAttrib3f;
        internal readonly Delegates.VertexAttrib3fv VertexAttrib3fv;
        internal readonly Delegates.VertexAttrib3s VertexAttrib3s;
        internal readonly Delegates.VertexAttrib3sv VertexAttrib3sv;
        internal readonly Delegates.VertexAttrib4bv VertexAttrib4bv;
        internal readonly Delegates.VertexAttrib4d VertexAttrib4d;
        internal readonly Delegates.VertexAttrib4dv VertexAttrib4dv;
        internal readonly Delegates.VertexAttrib4f VertexAttrib4f;
        internal readonly Delegates.VertexAttrib4fv VertexAttrib4fv;
        internal readonly Delegates.VertexAttrib4iv VertexAttrib4iv;
        internal readonly Delegates.VertexAttrib4Nbv VertexAttrib4Nbv;
        internal readonly Delegates.VertexAttrib4Niv VertexAttrib4Niv;
        internal readonly Delegates.VertexAttrib4Nsv VertexAttrib4Nsv;
        internal readonly Delegates.VertexAttrib4Nub VertexAttrib4Nub;
        internal readonly Delegates.VertexAttrib4Nubv VertexAttrib4Nubv;
        internal readonly Delegates.VertexAttrib4Nuiv VertexAttrib4Nuiv;
        internal readonly Delegates.VertexAttrib4Nusv VertexAttrib4Nusv;
        internal readonly Delegates.VertexAttrib4s VertexAttrib4s;
        internal readonly Delegates.VertexAttrib4sv VertexAttrib4sv;
        internal readonly Delegates.VertexAttrib4ubv VertexAttrib4ubv;
        internal readonly Delegates.VertexAttrib4uiv VertexAttrib4uiv;
        internal readonly Delegates.VertexAttrib4usv VertexAttrib4usv;
        internal readonly Delegates.VertexAttribI1i VertexAttribI1i;
        internal readonly Delegates.VertexAttribI1iv VertexAttribI1iv;
        internal readonly Delegates.VertexAttribI1ui VertexAttribI1ui;
        internal readonly Delegates.VertexAttribI1uiv VertexAttribI1uiv;
        internal readonly Delegates.VertexAttribI2i VertexAttribI2i;
        internal readonly Delegates.VertexAttribI2iv VertexAttribI2iv;
        internal readonly Delegates.VertexAttribI2ui VertexAttribI2ui;
        internal readonly Delegates.VertexAttribI2uiv VertexAttribI2uiv;
        internal readonly Delegates.VertexAttribI3i VertexAttribI3i;
        internal readonly Delegates.VertexAttribI3iv VertexAttribI3iv;
        internal readonly Delegates.VertexAttribI3ui VertexAttribI3ui;
        internal readonly Delegates.VertexAttribI3uiv VertexAttribI3uiv;
        internal readonly Delegates.VertexAttribI4bv VertexAttribI4bv;
        internal readonly Delegates.VertexAttribI4i VertexAttribI4i;
        internal readonly Delegates.VertexAttribI4iv VertexAttribI4iv;
        internal readonly Delegates.VertexAttribI4sv VertexAttribI4sv;
        internal readonly Delegates.VertexAttribI4ubv VertexAttribI4ubv;
        internal readonly Delegates.VertexAttribI4ui VertexAttribI4ui;
        internal readonly Delegates.VertexAttribI4uiv VertexAttribI4uiv;
        internal readonly Delegates.VertexAttribI4usv VertexAttribI4usv;
        internal readonly Delegates.VertexAttribIPointer VertexAttribIPointer;
        internal readonly Delegates.VertexAttribPointer VertexAttribPointer;
        internal readonly Delegates.Viewport Viewport;
        internal readonly Delegates.WaitSync WaitSync;

        internal readonly Delegates.Viewport_Box Viewport_Box;

        [System.Runtime.InteropServices.DllImport("opengl32.dll")]
        private static extern System.IntPtr wglGetProcAddress(string name);

        private static System.Delegate GetFunction(string name, System.Type type)
        {
            var function = wglGetProcAddress(name);

            if (function != System.IntPtr.Zero)
            {
                return System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(function, type);
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("function {0} not found", (object)name);
                return null;
            }
        }

        internal GL()
        {
            ActiveTexture = (Delegates.ActiveTexture)GetFunction("glActiveTexture", typeof(Delegates.ActiveTexture));
            AttachShader = (Delegates.AttachShader)GetFunction("glAttachShader", typeof(Delegates.AttachShader));
            BeginConditionalRender = (Delegates.BeginConditionalRender)GetFunction("glBeginConditionalRender", typeof(Delegates.BeginConditionalRender));
            BeginQuery = (Delegates.BeginQuery)GetFunction("glBeginQuery", typeof(Delegates.BeginQuery));
            BeginTransformFeedback = (Delegates.BeginTransformFeedback)GetFunction("glBeginTransformFeedback", typeof(Delegates.BeginTransformFeedback));
            BindAttribLocation = (Delegates.BindAttribLocation)GetFunction("glBindAttribLocation", typeof(Delegates.BindAttribLocation));
            BindBuffer = (Delegates.BindBuffer)GetFunction("glBindBuffer", typeof(Delegates.BindBuffer));
            BindBufferBase = (Delegates.BindBufferBase)GetFunction("glBindBufferBase", typeof(Delegates.BindBufferBase));
            BindBufferRange = (Delegates.BindBufferRange)GetFunction("glBindBufferRange", typeof(Delegates.BindBufferRange));
            BindFragDataLocation = (Delegates.BindFragDataLocation)GetFunction("glBindFragDataLocation", typeof(Delegates.BindFragDataLocation));
            BindFramebuffer = (Delegates.BindFramebuffer)GetFunction("glBindFramebuffer", typeof(Delegates.BindFramebuffer));
            BindRenderbuffer = (Delegates.BindRenderbuffer)GetFunction("glBindRenderbuffer", typeof(Delegates.BindRenderbuffer));
            BindTexture = (Delegates.BindTexture)GetFunction("glBindTexture", typeof(Delegates.BindTexture));
            BindVertexArray = (Delegates.BindVertexArray)GetFunction("glBindVertexArray", typeof(Delegates.BindVertexArray));
            BlendColor = (Delegates.BlendColor)GetFunction("glBlendColor", typeof(Delegates.BlendColor));
            BlendEquation = (Delegates.BlendEquation)GetFunction("glBlendEquation", typeof(Delegates.BlendEquation));
            BlendEquationSeparate = (Delegates.BlendEquationSeparate)GetFunction("glBlendEquationSeparate", typeof(Delegates.BlendEquationSeparate));
            BlendFunc = (Delegates.BlendFunc)GetFunction("glBlendFunc", typeof(Delegates.BlendFunc));
            BlendFuncSeparate = (Delegates.BlendFuncSeparate)GetFunction("glBlendFuncSeparate", typeof(Delegates.BlendFuncSeparate));
            BlitFramebuffer = (Delegates.BlitFramebuffer)GetFunction("glBlitFramebuffer", typeof(Delegates.BlitFramebuffer));
            BufferData = (Delegates.BufferData)GetFunction("glBufferData", typeof(Delegates.BufferData));
            BufferSubData = (Delegates.BufferSubData)GetFunction("glBufferSubData", typeof(Delegates.BufferSubData));
            CheckFramebufferStatus = (Delegates.CheckFramebufferStatus)GetFunction("glCheckFramebufferStatus", typeof(Delegates.CheckFramebufferStatus));
            ClampColor = (Delegates.ClampColor)GetFunction("glClampColor", typeof(Delegates.ClampColor));
            Clear = (Delegates.Clear)GetFunction("glClear", typeof(Delegates.Clear));
            ClearBufferfi = (Delegates.ClearBufferfi)GetFunction("glClearBufferfi", typeof(Delegates.ClearBufferfi));
            ClearBufferfv = (Delegates.ClearBufferfv)GetFunction("glClearBufferfv", typeof(Delegates.ClearBufferfv));
            ClearBufferiv = (Delegates.ClearBufferiv)GetFunction("glClearBufferiv", typeof(Delegates.ClearBufferiv));
            ClearBufferuiv = (Delegates.ClearBufferuiv)GetFunction("glClearBufferuiv", typeof(Delegates.ClearBufferuiv));
            ClearColor = (Delegates.ClearColor)GetFunction("glClearColor", typeof(Delegates.ClearColor));
            ClearDepth = (Delegates.ClearDepth)GetFunction("glClearDepth", typeof(Delegates.ClearDepth));
            ClearStencil = (Delegates.ClearStencil)GetFunction("glClearStencil", typeof(Delegates.ClearStencil));
            ClientWaitSync = (Delegates.ClientWaitSync)GetFunction("glClientWaitSync", typeof(Delegates.ClientWaitSync));
            ColorMask = (Delegates.ColorMask)GetFunction("glColorMask", typeof(Delegates.ColorMask));
            ColorMaski = (Delegates.ColorMaski)GetFunction("glColorMaski", typeof(Delegates.ColorMaski));
            CompileShader = (Delegates.CompileShader)GetFunction("glCompileShader", typeof(Delegates.CompileShader));
            CompressedTexImage1D = (Delegates.CompressedTexImage1D)GetFunction("glCompressedTexImage1D", typeof(Delegates.CompressedTexImage1D));
            CompressedTexImage2D = (Delegates.CompressedTexImage2D)GetFunction("glCompressedTexImage2D", typeof(Delegates.CompressedTexImage2D));
            CompressedTexImage3D = (Delegates.CompressedTexImage3D)GetFunction("glCompressedTexImage3D", typeof(Delegates.CompressedTexImage3D));
            CompressedTexSubImage1D = (Delegates.CompressedTexSubImage1D)GetFunction("glCompressedTexSubImage1D", typeof(Delegates.CompressedTexSubImage1D));
            CompressedTexSubImage2D = (Delegates.CompressedTexSubImage2D)GetFunction("glCompressedTexSubImage2D", typeof(Delegates.CompressedTexSubImage2D));
            CompressedTexSubImage3D = (Delegates.CompressedTexSubImage3D)GetFunction("glCompressedTexSubImage3D", typeof(Delegates.CompressedTexSubImage3D));
            CopyBufferSubData = (Delegates.CopyBufferSubData)GetFunction("glCopyBufferSubData", typeof(Delegates.CopyBufferSubData));
            CopyTexImage1D = (Delegates.CopyTexImage1D)GetFunction("glCopyTexImage1D", typeof(Delegates.CopyTexImage1D));
            CopyTexImage2D = (Delegates.CopyTexImage2D)GetFunction("glCopyTexImage2D", typeof(Delegates.CopyTexImage2D));
            CopyTexSubImage1D = (Delegates.CopyTexSubImage1D)GetFunction("glCopyTexSubImage1D", typeof(Delegates.CopyTexSubImage1D));
            CopyTexSubImage2D = (Delegates.CopyTexSubImage2D)GetFunction("glCopyTexSubImage2D", typeof(Delegates.CopyTexSubImage2D));
            CopyTexSubImage3D = (Delegates.CopyTexSubImage3D)GetFunction("glCopyTexSubImage3D", typeof(Delegates.CopyTexSubImage3D));
            CreateProgram = (Delegates.CreateProgram)GetFunction("glCreateProgram", typeof(Delegates.CreateProgram));
            CreateShader = (Delegates.CreateShader)GetFunction("glCreateShader", typeof(Delegates.CreateShader));
            CullFace = (Delegates.CullFace)GetFunction("glCullFace", typeof(Delegates.CullFace));
            DeleteBuffers = (Delegates.DeleteBuffers)GetFunction("glDeleteBuffers", typeof(Delegates.DeleteBuffers));
            DeleteFramebuffers = (Delegates.DeleteFramebuffers)GetFunction("glDeleteFramebuffers", typeof(Delegates.DeleteFramebuffers));
            DeleteProgram = (Delegates.DeleteProgram)GetFunction("glDeleteProgram", typeof(Delegates.DeleteProgram));
            DeleteQueries = (Delegates.DeleteQueries)GetFunction("glDeleteQueries", typeof(Delegates.DeleteQueries));
            DeleteRenderbuffers = (Delegates.DeleteRenderbuffers)GetFunction("glDeleteRenderbuffers", typeof(Delegates.DeleteRenderbuffers));
            DeleteShader = (Delegates.DeleteShader)GetFunction("glDeleteShader", typeof(Delegates.DeleteShader));
            DeleteSync = (Delegates.DeleteSync)GetFunction("glDeleteSync", typeof(Delegates.DeleteSync));
            DeleteTextures = (Delegates.DeleteTextures)GetFunction("glDeleteTextures", typeof(Delegates.DeleteTextures));
            DeleteVertexArrays = (Delegates.DeleteVertexArrays)GetFunction("glDeleteVertexArrays", typeof(Delegates.DeleteVertexArrays));
            DepthFunc = (Delegates.DepthFunc)GetFunction("glDepthFunc", typeof(Delegates.DepthFunc));
            DepthMask = (Delegates.DepthMask)GetFunction("glDepthMask", typeof(Delegates.DepthMask));
            DepthRange = (Delegates.DepthRange)GetFunction("glDepthRange", typeof(Delegates.DepthRange));
            DetachShader = (Delegates.DetachShader)GetFunction("glDetachShader", typeof(Delegates.DetachShader));
            Disable = (Delegates.Disable)GetFunction("glDisable", typeof(Delegates.Disable));
            Disablei = (Delegates.Disablei)GetFunction("glDisablei", typeof(Delegates.Disablei));
            DisableVertexAttribArray = (Delegates.DisableVertexAttribArray)GetFunction("glDisableVertexAttribArray", typeof(Delegates.DisableVertexAttribArray));
            DrawArrays = (Delegates.DrawArrays)GetFunction("glDrawArrays", typeof(Delegates.DrawArrays));
            DrawArraysInstanced = (Delegates.DrawArraysInstanced)GetFunction("glDrawArraysInstanced", typeof(Delegates.DrawArraysInstanced));
            DrawBuffer = (Delegates.DrawBuffer)GetFunction("glDrawBuffer", typeof(Delegates.DrawBuffer));
            DrawBuffers = (Delegates.DrawBuffers)GetFunction("glDrawBuffers", typeof(Delegates.DrawBuffers));
            DrawElements = (Delegates.DrawElements)GetFunction("glDrawElements", typeof(Delegates.DrawElements));
            DrawElementsBaseVertex = (Delegates.DrawElementsBaseVertex)GetFunction("glDrawElementsBaseVertex", typeof(Delegates.DrawElementsBaseVertex));
            DrawElementsInstanced = (Delegates.DrawElementsInstanced)GetFunction("glDrawElementsInstanced", typeof(Delegates.DrawElementsInstanced));
            DrawElementsInstancedBaseVertex = (Delegates.DrawElementsInstancedBaseVertex)GetFunction("glDrawElementsInstancedBaseVertex", typeof(Delegates.DrawElementsInstancedBaseVertex));
            DrawRangeElements = (Delegates.DrawRangeElements)GetFunction("glDrawRangeElements", typeof(Delegates.DrawRangeElements));
            DrawRangeElementsBaseVertex = (Delegates.DrawRangeElementsBaseVertex)GetFunction("glDrawRangeElementsBaseVertex", typeof(Delegates.DrawRangeElementsBaseVertex));
            Enable = (Delegates.Enable)GetFunction("glEnable", typeof(Delegates.Enable));
            Enablei = (Delegates.Enablei)GetFunction("glEnablei", typeof(Delegates.Enablei));
            EnableVertexAttribArray = (Delegates.EnableVertexAttribArray)GetFunction("glEnableVertexAttribArray", typeof(Delegates.EnableVertexAttribArray));
            EndConditionalRender = (Delegates.EndConditionalRender)GetFunction("glEndConditionalRender", typeof(Delegates.EndConditionalRender));
            EndQuery = (Delegates.EndQuery)GetFunction("glEndQuery", typeof(Delegates.EndQuery));
            EndTransformFeedback = (Delegates.EndTransformFeedback)GetFunction("glEndTransformFeedback", typeof(Delegates.EndTransformFeedback));
            FenceSync = (Delegates.FenceSync)GetFunction("glFenceSync", typeof(Delegates.FenceSync));
            Finish = (Delegates.Finish)GetFunction("glFinish", typeof(Delegates.Finish));
            Flush = (Delegates.Flush)GetFunction("glFlush", typeof(Delegates.Flush));
            FlushMappedBufferRange = (Delegates.FlushMappedBufferRange)GetFunction("glFlushMappedBufferRange", typeof(Delegates.FlushMappedBufferRange));
            FramebufferRenderbuffer = (Delegates.FramebufferRenderbuffer)GetFunction("glFramebufferRenderbuffer", typeof(Delegates.FramebufferRenderbuffer));
            FramebufferTexture = (Delegates.FramebufferTexture)GetFunction("glFramebufferTexture", typeof(Delegates.FramebufferTexture));
            FramebufferTexture1D = (Delegates.FramebufferTexture1D)GetFunction("glFramebufferTexture1D", typeof(Delegates.FramebufferTexture1D));
            FramebufferTexture2D = (Delegates.FramebufferTexture2D)GetFunction("glFramebufferTexture2D", typeof(Delegates.FramebufferTexture2D));
            FramebufferTexture3D = (Delegates.FramebufferTexture3D)GetFunction("glFramebufferTexture3D", typeof(Delegates.FramebufferTexture3D));
            FramebufferTextureLayer = (Delegates.FramebufferTextureLayer)GetFunction("glFramebufferTextureLayer", typeof(Delegates.FramebufferTextureLayer));
            FrontFace = (Delegates.FrontFace)GetFunction("glFrontFace", typeof(Delegates.FrontFace));
            GenBuffers = (Delegates.GenBuffers)GetFunction("glGenBuffers", typeof(Delegates.GenBuffers));
            GenerateMipmap = (Delegates.GenerateMipmap)GetFunction("glGenerateMipmap", typeof(Delegates.GenerateMipmap));
            GenFramebuffers = (Delegates.GenFramebuffers)GetFunction("glGenFramebuffers", typeof(Delegates.GenFramebuffers));
            GenQueries = (Delegates.GenQueries)GetFunction("glGenQueries", typeof(Delegates.GenQueries));
            GenRenderbuffers = (Delegates.GenRenderbuffers)GetFunction("glGenRenderbuffers", typeof(Delegates.GenRenderbuffers));
            GenTextures = (Delegates.GenTextures)GetFunction("glGenTextures", typeof(Delegates.GenTextures));
            GenVertexArrays = (Delegates.GenVertexArrays)GetFunction("glGenVertexArrays", typeof(Delegates.GenVertexArrays));
            GetActiveAttrib = (Delegates.GetActiveAttrib)GetFunction("glGetActiveAttrib", typeof(Delegates.GetActiveAttrib));
            GetActiveUniform = (Delegates.GetActiveUniform)GetFunction("glGetActiveUniform", typeof(Delegates.GetActiveUniform));
            GetActiveUniformBlockiv = (Delegates.GetActiveUniformBlockiv)GetFunction("glGetActiveUniformBlockiv", typeof(Delegates.GetActiveUniformBlockiv));
            GetActiveUniformBlockName = (Delegates.GetActiveUniformBlockName)GetFunction("glGetActiveUniformBlockName", typeof(Delegates.GetActiveUniformBlockName));
            GetActiveUniformName = (Delegates.GetActiveUniformName)GetFunction("glGetActiveUniformName", typeof(Delegates.GetActiveUniformName));
            GetActiveUniformsiv = (Delegates.GetActiveUniformsiv)GetFunction("glGetActiveUniformsiv", typeof(Delegates.GetActiveUniformsiv));
            GetAttachedShaders = (Delegates.GetAttachedShaders)GetFunction("glGetAttachedShaders", typeof(Delegates.GetAttachedShaders));
            GetAttribLocation = (Delegates.GetAttribLocation)GetFunction("glGetAttribLocation", typeof(Delegates.GetAttribLocation));
            GetBooleani_v = (Delegates.GetBooleani_v)GetFunction("glGetBooleani_v", typeof(Delegates.GetBooleani_v));
            GetBooleanv = (Delegates.GetBooleanv)GetFunction("glGetBooleanv", typeof(Delegates.GetBooleanv));
            GetBufferParameteri64v = (Delegates.GetBufferParameteri64v)GetFunction("glGetBufferParameteri64v", typeof(Delegates.GetBufferParameteri64v));
            GetBufferParameteriv = (Delegates.GetBufferParameteriv)GetFunction("glGetBufferParameteriv", typeof(Delegates.GetBufferParameteriv));
            GetBufferPointerv = (Delegates.GetBufferPointerv)GetFunction("glGetBufferPointerv", typeof(Delegates.GetBufferPointerv));
            GetBufferSubData = (Delegates.GetBufferSubData)GetFunction("glGetBufferSubData", typeof(Delegates.GetBufferSubData));
            GetCompressedTexImage = (Delegates.GetCompressedTexImage)GetFunction("glGetCompressedTexImage", typeof(Delegates.GetCompressedTexImage));
            GetDoublev = (Delegates.GetDoublev)GetFunction("glGetDoublev", typeof(Delegates.GetDoublev));
            GetError = (Delegates.GetError)GetFunction("glGetError", typeof(Delegates.GetError));
            GetFloatv = (Delegates.GetFloatv)GetFunction("glGetFloatv", typeof(Delegates.GetFloatv));
            GetFragDataLocation = (Delegates.GetFragDataLocation)GetFunction("glGetFragDataLocation", typeof(Delegates.GetFragDataLocation));
            GetFramebufferAttachmentParameteriv = (Delegates.GetFramebufferAttachmentParameteriv)GetFunction("glGetFramebufferAttachmentParameteriv", typeof(Delegates.GetFramebufferAttachmentParameteriv));
            GetInteger64i_v = (Delegates.GetInteger64i_v)GetFunction("glGetInteger64i_v", typeof(Delegates.GetInteger64i_v));
            GetInteger64v = (Delegates.GetInteger64v)GetFunction("glGetInteger64v", typeof(Delegates.GetInteger64v));
            GetIntegeri_v = (Delegates.GetIntegeri_v)GetFunction("glGetIntegeri_v", typeof(Delegates.GetIntegeri_v));
            GetIntegerv = (Delegates.GetIntegerv)GetFunction("glGetIntegerv", typeof(Delegates.GetIntegerv));
            GetMultisamplefv = (Delegates.GetMultisamplefv)GetFunction("glGetMultisamplefv", typeof(Delegates.GetMultisamplefv));
            GetProgramInfoLog = (Delegates.GetProgramInfoLog)GetFunction("glGetProgramInfoLog", typeof(Delegates.GetProgramInfoLog));
            GetProgramiv = (Delegates.GetProgramiv)GetFunction("glGetProgramiv", typeof(Delegates.GetProgramiv));
            GetQueryiv = (Delegates.GetQueryiv)GetFunction("glGetQueryiv", typeof(Delegates.GetQueryiv));
            GetQueryObjectiv = (Delegates.GetQueryObjectiv)GetFunction("glGetQueryObjectiv", typeof(Delegates.GetQueryObjectiv));
            GetQueryObjectuiv = (Delegates.GetQueryObjectuiv)GetFunction("glGetQueryObjectuiv", typeof(Delegates.GetQueryObjectuiv));
            GetRenderbufferParameteriv = (Delegates.GetRenderbufferParameteriv)GetFunction("glGetRenderbufferParameteriv", typeof(Delegates.GetRenderbufferParameteriv));
            GetShaderInfoLog = (Delegates.GetShaderInfoLog)GetFunction("glGetShaderInfoLog", typeof(Delegates.GetShaderInfoLog));
            GetShaderiv = (Delegates.GetShaderiv)GetFunction("glGetShaderiv", typeof(Delegates.GetShaderiv));
            GetShaderSource = (Delegates.GetShaderSource)GetFunction("glGetShaderSource", typeof(Delegates.GetShaderSource));
            GetString = (Delegates.GetString)GetFunction("glGetString", typeof(Delegates.GetString));
            GetStringi = (Delegates.GetStringi)GetFunction("glGetStringi", typeof(Delegates.GetStringi));
            GetSynciv = (Delegates.GetSynciv)GetFunction("glGetSynciv", typeof(Delegates.GetSynciv));
            GetTexImage = (Delegates.GetTexImage)GetFunction("glGetTexImage", typeof(Delegates.GetTexImage));
            GetTexLevelParameterfv = (Delegates.GetTexLevelParameterfv)GetFunction("glGetTexLevelParameterfv", typeof(Delegates.GetTexLevelParameterfv));
            GetTexLevelParameteriv = (Delegates.GetTexLevelParameteriv)GetFunction("glGetTexLevelParameteriv", typeof(Delegates.GetTexLevelParameteriv));
            GetTexParameterfv = (Delegates.GetTexParameterfv)GetFunction("glGetTexParameterfv", typeof(Delegates.GetTexParameterfv));
            GetTexParameterIiv = (Delegates.GetTexParameterIiv)GetFunction("glGetTexParameterIiv", typeof(Delegates.GetTexParameterIiv));
            GetTexParameterIuiv = (Delegates.GetTexParameterIuiv)GetFunction("glGetTexParameterIuiv", typeof(Delegates.GetTexParameterIuiv));
            GetTexParameteriv = (Delegates.GetTexParameteriv)GetFunction("glGetTexParameteriv", typeof(Delegates.GetTexParameteriv));
            GetTransformFeedbackVarying = (Delegates.GetTransformFeedbackVarying)GetFunction("glGetTransformFeedbackVarying", typeof(Delegates.GetTransformFeedbackVarying));
            GetUniformBlockIndex = (Delegates.GetUniformBlockIndex)GetFunction("glGetUniformBlockIndex", typeof(Delegates.GetUniformBlockIndex));
            GetUniformfv = (Delegates.GetUniformfv)GetFunction("glGetUniformfv", typeof(Delegates.GetUniformfv));
            GetUniformIndices = (Delegates.GetUniformIndices)GetFunction("glGetUniformIndices", typeof(Delegates.GetUniformIndices));
            GetUniformiv = (Delegates.GetUniformiv)GetFunction("glGetUniformiv", typeof(Delegates.GetUniformiv));
            GetUniformLocation = (Delegates.GetUniformLocation)GetFunction("glGetUniformLocation", typeof(Delegates.GetUniformLocation));
            GetUniformuiv = (Delegates.GetUniformuiv)GetFunction("glGetUniformuiv", typeof(Delegates.GetUniformuiv));
            GetVertexAttribdv = (Delegates.GetVertexAttribdv)GetFunction("glGetVertexAttribdv", typeof(Delegates.GetVertexAttribdv));
            GetVertexAttribfv = (Delegates.GetVertexAttribfv)GetFunction("glGetVertexAttribfv", typeof(Delegates.GetVertexAttribfv));
            GetVertexAttribIiv = (Delegates.GetVertexAttribIiv)GetFunction("glGetVertexAttribIiv", typeof(Delegates.GetVertexAttribIiv));
            GetVertexAttribIuiv = (Delegates.GetVertexAttribIuiv)GetFunction("glGetVertexAttribIuiv", typeof(Delegates.GetVertexAttribIuiv));
            GetVertexAttribiv = (Delegates.GetVertexAttribiv)GetFunction("glGetVertexAttribiv", typeof(Delegates.GetVertexAttribiv));
            GetVertexAttribPointerv = (Delegates.GetVertexAttribPointerv)GetFunction("glGetVertexAttribPointerv", typeof(Delegates.GetVertexAttribPointerv));
            Hint = (Delegates.Hint)GetFunction("glHint", typeof(Delegates.Hint));
            IsBuffer = (Delegates.IsBuffer)GetFunction("glIsBuffer", typeof(Delegates.IsBuffer));
            IsEnabled = (Delegates.IsEnabled)GetFunction("glIsEnabled", typeof(Delegates.IsEnabled));
            IsEnabledi = (Delegates.IsEnabledi)GetFunction("glIsEnabledi", typeof(Delegates.IsEnabledi));
            IsFramebuffer = (Delegates.IsFramebuffer)GetFunction("glIsFramebuffer", typeof(Delegates.IsFramebuffer));
            IsProgram = (Delegates.IsProgram)GetFunction("glIsProgram", typeof(Delegates.IsProgram));
            IsQuery = (Delegates.IsQuery)GetFunction("glIsQuery", typeof(Delegates.IsQuery));
            IsRenderbuffer = (Delegates.IsRenderbuffer)GetFunction("glIsRenderbuffer", typeof(Delegates.IsRenderbuffer));
            IsShader = (Delegates.IsShader)GetFunction("glIsShader", typeof(Delegates.IsShader));
            IsSync = (Delegates.IsSync)GetFunction("glIsSync", typeof(Delegates.IsSync));
            IsTexture = (Delegates.IsTexture)GetFunction("glIsTexture", typeof(Delegates.IsTexture));
            IsVertexArray = (Delegates.IsVertexArray)GetFunction("glIsVertexArray", typeof(Delegates.IsVertexArray));
            LineWidth = (Delegates.LineWidth)GetFunction("glLineWidth", typeof(Delegates.LineWidth));
            LinkProgram = (Delegates.LinkProgram)GetFunction("glLinkProgram", typeof(Delegates.LinkProgram));
            LogicOp = (Delegates.LogicOp)GetFunction("glLogicOp", typeof(Delegates.LogicOp));
            MapBuffer = (Delegates.MapBuffer)GetFunction("glMapBuffer", typeof(Delegates.MapBuffer));
            MapBufferRange = (Delegates.MapBufferRange)GetFunction("glMapBufferRange", typeof(Delegates.MapBufferRange));
            MultiDrawArrays = (Delegates.MultiDrawArrays)GetFunction("glMultiDrawArrays", typeof(Delegates.MultiDrawArrays));
            MultiDrawElements = (Delegates.MultiDrawElements)GetFunction("glMultiDrawElements", typeof(Delegates.MultiDrawElements));
            MultiDrawElementsBaseVertex = (Delegates.MultiDrawElementsBaseVertex)GetFunction("glMultiDrawElementsBaseVertex", typeof(Delegates.MultiDrawElementsBaseVertex));
            PixelStoref = (Delegates.PixelStoref)GetFunction("glPixelStoref", typeof(Delegates.PixelStoref));
            PixelStorei = (Delegates.PixelStorei)GetFunction("glPixelStorei", typeof(Delegates.PixelStorei));
            PointParameterf = (Delegates.PointParameterf)GetFunction("glPointParameterf", typeof(Delegates.PointParameterf));
            PointParameterfv = (Delegates.PointParameterfv)GetFunction("glPointParameterfv", typeof(Delegates.PointParameterfv));
            PointParameteri = (Delegates.PointParameteri)GetFunction("glPointParameteri", typeof(Delegates.PointParameteri));
            PointParameteriv = (Delegates.PointParameteriv)GetFunction("glPointParameteriv", typeof(Delegates.PointParameteriv));
            PointSize = (Delegates.PointSize)GetFunction("glPointSize", typeof(Delegates.PointSize));
            PolygonMode = (Delegates.PolygonMode)GetFunction("glPolygonMode", typeof(Delegates.PolygonMode));
            PolygonOffset = (Delegates.PolygonOffset)GetFunction("glPolygonOffset", typeof(Delegates.PolygonOffset));
            PrimitiveRestartIndex = (Delegates.PrimitiveRestartIndex)GetFunction("glPrimitiveRestartIndex", typeof(Delegates.PrimitiveRestartIndex));
            ProvokingVertex = (Delegates.ProvokingVertex)GetFunction("glProvokingVertex", typeof(Delegates.ProvokingVertex));
            ReadBuffer = (Delegates.ReadBuffer)GetFunction("glReadBuffer", typeof(Delegates.ReadBuffer));
            ReadPixels = (Delegates.ReadPixels)GetFunction("glReadPixels", typeof(Delegates.ReadPixels));
            RenderbufferStorage = (Delegates.RenderbufferStorage)GetFunction("glRenderbufferStorage", typeof(Delegates.RenderbufferStorage));
            RenderbufferStorageMultisample = (Delegates.RenderbufferStorageMultisample)GetFunction("glRenderbufferStorageMultisample", typeof(Delegates.RenderbufferStorageMultisample));
            SampleCoverage = (Delegates.SampleCoverage)GetFunction("glSampleCoverage", typeof(Delegates.SampleCoverage));
            SampleMaski = (Delegates.SampleMaski)GetFunction("glSampleMaski", typeof(Delegates.SampleMaski));
            Scissor = (Delegates.Scissor)GetFunction("glScissor", typeof(Delegates.Scissor));
            ShaderSource = (Delegates.ShaderSource)GetFunction("glShaderSource", typeof(Delegates.ShaderSource));
            StencilFunc = (Delegates.StencilFunc)GetFunction("glStencilFunc", typeof(Delegates.StencilFunc));
            StencilFuncSeparate = (Delegates.StencilFuncSeparate)GetFunction("glStencilFuncSeparate", typeof(Delegates.StencilFuncSeparate));
            StencilMask = (Delegates.StencilMask)GetFunction("glStencilMask", typeof(Delegates.StencilMask));
            StencilMaskSeparate = (Delegates.StencilMaskSeparate)GetFunction("glStencilMaskSeparate", typeof(Delegates.StencilMaskSeparate));
            StencilOp = (Delegates.StencilOp)GetFunction("glStencilOp", typeof(Delegates.StencilOp));
            StencilOpSeparate = (Delegates.StencilOpSeparate)GetFunction("glStencilOpSeparate", typeof(Delegates.StencilOpSeparate));
            TexBuffer = (Delegates.TexBuffer)GetFunction("glTexBuffer", typeof(Delegates.TexBuffer));
            TexImage1D = (Delegates.TexImage1D)GetFunction("glTexImage1D", typeof(Delegates.TexImage1D));
            TexImage2D = (Delegates.TexImage2D)GetFunction("glTexImage2D", typeof(Delegates.TexImage2D));
            TexImage2DMultisample = (Delegates.TexImage2DMultisample)GetFunction("glTexImage2DMultisample", typeof(Delegates.TexImage2DMultisample));
            TexImage3D = (Delegates.TexImage3D)GetFunction("glTexImage3D", typeof(Delegates.TexImage3D));
            TexImage3DMultisample = (Delegates.TexImage3DMultisample)GetFunction("glTexImage3DMultisample", typeof(Delegates.TexImage3DMultisample));
            TexParameterf = (Delegates.TexParameterf)GetFunction("glTexParameterf", typeof(Delegates.TexParameterf));
            TexParameterfv = (Delegates.TexParameterfv)GetFunction("glTexParameterfv", typeof(Delegates.TexParameterfv));
            TexParameteri = (Delegates.TexParameteri)GetFunction("glTexParameteri", typeof(Delegates.TexParameteri));
            TexParameterIiv = (Delegates.TexParameterIiv)GetFunction("glTexParameterIiv", typeof(Delegates.TexParameterIiv));
            TexParameterIuiv = (Delegates.TexParameterIuiv)GetFunction("glTexParameterIuiv", typeof(Delegates.TexParameterIuiv));
            TexParameteriv = (Delegates.TexParameteriv)GetFunction("glTexParameteriv", typeof(Delegates.TexParameteriv));
            TexSubImage1D = (Delegates.TexSubImage1D)GetFunction("glTexSubImage1D", typeof(Delegates.TexSubImage1D));
            TexSubImage2D = (Delegates.TexSubImage2D)GetFunction("glTexSubImage2D", typeof(Delegates.TexSubImage2D));
            TexSubImage3D = (Delegates.TexSubImage3D)GetFunction("glTexSubImage3D", typeof(Delegates.TexSubImage3D));
            TransformFeedbackVaryings = (Delegates.TransformFeedbackVaryings)GetFunction("glTransformFeedbackVaryings", typeof(Delegates.TransformFeedbackVaryings));
            Uniform1f = (Delegates.Uniform1f)GetFunction("glUniform1f", typeof(Delegates.Uniform1f));
            Uniform1fv = (Delegates.Uniform1fv)GetFunction("glUniform1fv", typeof(Delegates.Uniform1fv));
            Uniform1i = (Delegates.Uniform1i)GetFunction("glUniform1i", typeof(Delegates.Uniform1i));
            Uniform1iv = (Delegates.Uniform1iv)GetFunction("glUniform1iv", typeof(Delegates.Uniform1iv));
            Uniform1ui = (Delegates.Uniform1ui)GetFunction("glUniform1ui", typeof(Delegates.Uniform1ui));
            Uniform1uiv = (Delegates.Uniform1uiv)GetFunction("glUniform1uiv", typeof(Delegates.Uniform1uiv));
            Uniform2f = (Delegates.Uniform2f)GetFunction("glUniform2f", typeof(Delegates.Uniform2f));
            Uniform2fv = (Delegates.Uniform2fv)GetFunction("glUniform2fv", typeof(Delegates.Uniform2fv));
            Uniform2i = (Delegates.Uniform2i)GetFunction("glUniform2i", typeof(Delegates.Uniform2i));
            Uniform2iv = (Delegates.Uniform2iv)GetFunction("glUniform2iv", typeof(Delegates.Uniform2iv));
            Uniform2ui = (Delegates.Uniform2ui)GetFunction("glUniform2ui", typeof(Delegates.Uniform2ui));
            Uniform2uiv = (Delegates.Uniform2uiv)GetFunction("glUniform2uiv", typeof(Delegates.Uniform2uiv));
            Uniform3f = (Delegates.Uniform3f)GetFunction("glUniform3f", typeof(Delegates.Uniform3f));
            Uniform3fv = (Delegates.Uniform3fv)GetFunction("glUniform3fv", typeof(Delegates.Uniform3fv));
            Uniform3i = (Delegates.Uniform3i)GetFunction("glUniform3i", typeof(Delegates.Uniform3i));
            Uniform3iv = (Delegates.Uniform3iv)GetFunction("glUniform3iv", typeof(Delegates.Uniform3iv));
            Uniform3ui = (Delegates.Uniform3ui)GetFunction("glUniform3ui", typeof(Delegates.Uniform3ui));
            Uniform3uiv = (Delegates.Uniform3uiv)GetFunction("glUniform3uiv", typeof(Delegates.Uniform3uiv));
            Uniform4f = (Delegates.Uniform4f)GetFunction("glUniform4f", typeof(Delegates.Uniform4f));
            Uniform4fv = (Delegates.Uniform4fv)GetFunction("glUniform4fv", typeof(Delegates.Uniform4fv));
            Uniform4i = (Delegates.Uniform4i)GetFunction("glUniform4i", typeof(Delegates.Uniform4i));
            Uniform4iv = (Delegates.Uniform4iv)GetFunction("glUniform4iv", typeof(Delegates.Uniform4iv));
            Uniform4ui = (Delegates.Uniform4ui)GetFunction("glUniform4ui", typeof(Delegates.Uniform4ui));
            Uniform4uiv = (Delegates.Uniform4uiv)GetFunction("glUniform4uiv", typeof(Delegates.Uniform4uiv));
            UniformBlockBinding = (Delegates.UniformBlockBinding)GetFunction("glUniformBlockBinding", typeof(Delegates.UniformBlockBinding));
            UniformMatrix2fv = (Delegates.UniformMatrix2fv)GetFunction("glUniformMatrix2fv", typeof(Delegates.UniformMatrix2fv));
            UniformMatrix2x3fv = (Delegates.UniformMatrix2x3fv)GetFunction("glUniformMatrix2x3fv", typeof(Delegates.UniformMatrix2x3fv));
            UniformMatrix2x4fv = (Delegates.UniformMatrix2x4fv)GetFunction("glUniformMatrix2x4fv", typeof(Delegates.UniformMatrix2x4fv));
            UniformMatrix3fv = (Delegates.UniformMatrix3fv)GetFunction("glUniformMatrix3fv", typeof(Delegates.UniformMatrix3fv));
            UniformMatrix3x2fv = (Delegates.UniformMatrix3x2fv)GetFunction("glUniformMatrix3x2fv", typeof(Delegates.UniformMatrix3x2fv));
            UniformMatrix3x4fv = (Delegates.UniformMatrix3x4fv)GetFunction("glUniformMatrix3x4fv", typeof(Delegates.UniformMatrix3x4fv));
            UniformMatrix4fv = (Delegates.UniformMatrix4fv)GetFunction("glUniformMatrix4fv", typeof(Delegates.UniformMatrix4fv));
            UniformMatrix4x2fv = (Delegates.UniformMatrix4x2fv)GetFunction("glUniformMatrix4x2fv", typeof(Delegates.UniformMatrix4x2fv));
            UniformMatrix4x3fv = (Delegates.UniformMatrix4x3fv)GetFunction("glUniformMatrix4x3fv", typeof(Delegates.UniformMatrix4x3fv));
            UnmapBuffer = (Delegates.UnmapBuffer)GetFunction("glUnmapBuffer", typeof(Delegates.UnmapBuffer));
            UseProgram = (Delegates.UseProgram)GetFunction("glUseProgram", typeof(Delegates.UseProgram));
            ValidateProgram = (Delegates.ValidateProgram)GetFunction("glValidateProgram", typeof(Delegates.ValidateProgram));
            VertexAttrib1d = (Delegates.VertexAttrib1d)GetFunction("glVertexAttrib1d", typeof(Delegates.VertexAttrib1d));
            VertexAttrib1dv = (Delegates.VertexAttrib1dv)GetFunction("glVertexAttrib1dv", typeof(Delegates.VertexAttrib1dv));
            VertexAttrib1f = (Delegates.VertexAttrib1f)GetFunction("glVertexAttrib1f", typeof(Delegates.VertexAttrib1f));
            VertexAttrib1fv = (Delegates.VertexAttrib1fv)GetFunction("glVertexAttrib1fv", typeof(Delegates.VertexAttrib1fv));
            VertexAttrib1s = (Delegates.VertexAttrib1s)GetFunction("glVertexAttrib1s", typeof(Delegates.VertexAttrib1s));
            VertexAttrib1sv = (Delegates.VertexAttrib1sv)GetFunction("glVertexAttrib1sv", typeof(Delegates.VertexAttrib1sv));
            VertexAttrib2d = (Delegates.VertexAttrib2d)GetFunction("glVertexAttrib2d", typeof(Delegates.VertexAttrib2d));
            VertexAttrib2dv = (Delegates.VertexAttrib2dv)GetFunction("glVertexAttrib2dv", typeof(Delegates.VertexAttrib2dv));
            VertexAttrib2f = (Delegates.VertexAttrib2f)GetFunction("glVertexAttrib2f", typeof(Delegates.VertexAttrib2f));
            VertexAttrib2fv = (Delegates.VertexAttrib2fv)GetFunction("glVertexAttrib2fv", typeof(Delegates.VertexAttrib2fv));
            VertexAttrib2s = (Delegates.VertexAttrib2s)GetFunction("glVertexAttrib2s", typeof(Delegates.VertexAttrib2s));
            VertexAttrib2sv = (Delegates.VertexAttrib2sv)GetFunction("glVertexAttrib2sv", typeof(Delegates.VertexAttrib2sv));
            VertexAttrib3d = (Delegates.VertexAttrib3d)GetFunction("glVertexAttrib3d", typeof(Delegates.VertexAttrib3d));
            VertexAttrib3dv = (Delegates.VertexAttrib3dv)GetFunction("glVertexAttrib3dv", typeof(Delegates.VertexAttrib3dv));
            VertexAttrib3f = (Delegates.VertexAttrib3f)GetFunction("glVertexAttrib3f", typeof(Delegates.VertexAttrib3f));
            VertexAttrib3fv = (Delegates.VertexAttrib3fv)GetFunction("glVertexAttrib3fv", typeof(Delegates.VertexAttrib3fv));
            VertexAttrib3s = (Delegates.VertexAttrib3s)GetFunction("glVertexAttrib3s", typeof(Delegates.VertexAttrib3s));
            VertexAttrib3sv = (Delegates.VertexAttrib3sv)GetFunction("glVertexAttrib3sv", typeof(Delegates.VertexAttrib3sv));
            VertexAttrib4bv = (Delegates.VertexAttrib4bv)GetFunction("glVertexAttrib4bv", typeof(Delegates.VertexAttrib4bv));
            VertexAttrib4d = (Delegates.VertexAttrib4d)GetFunction("glVertexAttrib4d", typeof(Delegates.VertexAttrib4d));
            VertexAttrib4dv = (Delegates.VertexAttrib4dv)GetFunction("glVertexAttrib4dv", typeof(Delegates.VertexAttrib4dv));
            VertexAttrib4f = (Delegates.VertexAttrib4f)GetFunction("glVertexAttrib4f", typeof(Delegates.VertexAttrib4f));
            VertexAttrib4fv = (Delegates.VertexAttrib4fv)GetFunction("glVertexAttrib4fv", typeof(Delegates.VertexAttrib4fv));
            VertexAttrib4iv = (Delegates.VertexAttrib4iv)GetFunction("glVertexAttrib4iv", typeof(Delegates.VertexAttrib4iv));
            VertexAttrib4Nbv = (Delegates.VertexAttrib4Nbv)GetFunction("glVertexAttrib4Nbv", typeof(Delegates.VertexAttrib4Nbv));
            VertexAttrib4Niv = (Delegates.VertexAttrib4Niv)GetFunction("glVertexAttrib4Niv", typeof(Delegates.VertexAttrib4Niv));
            VertexAttrib4Nsv = (Delegates.VertexAttrib4Nsv)GetFunction("glVertexAttrib4Nsv", typeof(Delegates.VertexAttrib4Nsv));
            VertexAttrib4Nub = (Delegates.VertexAttrib4Nub)GetFunction("glVertexAttrib4Nub", typeof(Delegates.VertexAttrib4Nub));
            VertexAttrib4Nubv = (Delegates.VertexAttrib4Nubv)GetFunction("glVertexAttrib4Nubv", typeof(Delegates.VertexAttrib4Nubv));
            VertexAttrib4Nuiv = (Delegates.VertexAttrib4Nuiv)GetFunction("glVertexAttrib4Nuiv", typeof(Delegates.VertexAttrib4Nuiv));
            VertexAttrib4Nusv = (Delegates.VertexAttrib4Nusv)GetFunction("glVertexAttrib4Nusv", typeof(Delegates.VertexAttrib4Nusv));
            VertexAttrib4s = (Delegates.VertexAttrib4s)GetFunction("glVertexAttrib4s", typeof(Delegates.VertexAttrib4s));
            VertexAttrib4sv = (Delegates.VertexAttrib4sv)GetFunction("glVertexAttrib4sv", typeof(Delegates.VertexAttrib4sv));
            VertexAttrib4ubv = (Delegates.VertexAttrib4ubv)GetFunction("glVertexAttrib4ubv", typeof(Delegates.VertexAttrib4ubv));
            VertexAttrib4uiv = (Delegates.VertexAttrib4uiv)GetFunction("glVertexAttrib4uiv", typeof(Delegates.VertexAttrib4uiv));
            VertexAttrib4usv = (Delegates.VertexAttrib4usv)GetFunction("glVertexAttrib4usv", typeof(Delegates.VertexAttrib4usv));
            VertexAttribI1i = (Delegates.VertexAttribI1i)GetFunction("glVertexAttribI1i", typeof(Delegates.VertexAttribI1i));
            VertexAttribI1iv = (Delegates.VertexAttribI1iv)GetFunction("glVertexAttribI1iv", typeof(Delegates.VertexAttribI1iv));
            VertexAttribI1ui = (Delegates.VertexAttribI1ui)GetFunction("glVertexAttribI1ui", typeof(Delegates.VertexAttribI1ui));
            VertexAttribI1uiv = (Delegates.VertexAttribI1uiv)GetFunction("glVertexAttribI1uiv", typeof(Delegates.VertexAttribI1uiv));
            VertexAttribI2i = (Delegates.VertexAttribI2i)GetFunction("glVertexAttribI2i", typeof(Delegates.VertexAttribI2i));
            VertexAttribI2iv = (Delegates.VertexAttribI2iv)GetFunction("glVertexAttribI2iv", typeof(Delegates.VertexAttribI2iv));
            VertexAttribI2ui = (Delegates.VertexAttribI2ui)GetFunction("glVertexAttribI2ui", typeof(Delegates.VertexAttribI2ui));
            VertexAttribI2uiv = (Delegates.VertexAttribI2uiv)GetFunction("glVertexAttribI2uiv", typeof(Delegates.VertexAttribI2uiv));
            VertexAttribI3i = (Delegates.VertexAttribI3i)GetFunction("glVertexAttribI3i", typeof(Delegates.VertexAttribI3i));
            VertexAttribI3iv = (Delegates.VertexAttribI3iv)GetFunction("glVertexAttribI3iv", typeof(Delegates.VertexAttribI3iv));
            VertexAttribI3ui = (Delegates.VertexAttribI3ui)GetFunction("glVertexAttribI3ui", typeof(Delegates.VertexAttribI3ui));
            VertexAttribI3uiv = (Delegates.VertexAttribI3uiv)GetFunction("glVertexAttribI3uiv", typeof(Delegates.VertexAttribI3uiv));
            VertexAttribI4bv = (Delegates.VertexAttribI4bv)GetFunction("glVertexAttribI4bv", typeof(Delegates.VertexAttribI4bv));
            VertexAttribI4i = (Delegates.VertexAttribI4i)GetFunction("glVertexAttribI4i", typeof(Delegates.VertexAttribI4i));
            VertexAttribI4iv = (Delegates.VertexAttribI4iv)GetFunction("glVertexAttribI4iv", typeof(Delegates.VertexAttribI4iv));
            VertexAttribI4sv = (Delegates.VertexAttribI4sv)GetFunction("glVertexAttribI4sv", typeof(Delegates.VertexAttribI4sv));
            VertexAttribI4ubv = (Delegates.VertexAttribI4ubv)GetFunction("glVertexAttribI4ubv", typeof(Delegates.VertexAttribI4ubv));
            VertexAttribI4ui = (Delegates.VertexAttribI4ui)GetFunction("glVertexAttribI4ui", typeof(Delegates.VertexAttribI4ui));
            VertexAttribI4uiv = (Delegates.VertexAttribI4uiv)GetFunction("glVertexAttribI4uiv", typeof(Delegates.VertexAttribI4uiv));
            VertexAttribI4usv = (Delegates.VertexAttribI4usv)GetFunction("glVertexAttribI4usv", typeof(Delegates.VertexAttribI4usv));
            VertexAttribIPointer = (Delegates.VertexAttribIPointer)GetFunction("glVertexAttribIPointer", typeof(Delegates.VertexAttribIPointer));
            VertexAttribPointer = (Delegates.VertexAttribPointer)GetFunction("glVertexAttribPointer", typeof(Delegates.VertexAttribPointer));
            Viewport = (Delegates.Viewport)GetFunction("glViewport", typeof(Delegates.Viewport));
            WaitSync = (Delegates.WaitSync)GetFunction("glWaitSync", typeof(Delegates.WaitSync));

            Viewport_Box = (Delegates.Viewport_Box)GetFunction("glViewport", typeof(Delegates.Viewport_Box));
        }
    }
}
